/*
 * Copyright (C) 2016 MediaTek Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See http://www.gnu.org/licenses/gpl-2.0.html for more details.
 */


/*****************************************************************************
 *
 * Filename:
 * ---------
 *     s5k3m3_setting_v2.h
 *
 * Project:
 * --------
 *     ALPS
 *
 * Description:
 * ------------
 *     CMOS sensor setting file
 *
 * Setting Release Date:
 * ------------
 *     2016.09.01
 *
 ****************************************************************************/
#ifndef _s5k3m3MIPI_SETTING_V2_H_
#define _s5k3m3MIPI_SETTING_V2_H_

static kal_uint16 addr_data_pair_init_v2_s5k3m3[] = {
#ifdef FrameAESync
	0x6214, 0x7971,
	0x6218, 0x7150,
	0x6028, 0x2000,
	0x602A, 0x30EC,
	0x6F12, 0x0000,
	0x6F12, 0x0000,
	0x6F12, 0x0449,
	0x6F12, 0x0348,
	0x6F12, 0x044A,
	0x6F12, 0x0860,
	0x6F12, 0x101A,
	0x6F12, 0x8880,
	0x6F12, 0x00F0,
	0x6F12, 0x4EB8,
	0x6F12, 0x2000,
	0x6F12, 0x3240,
	0x6F12, 0x2000,
	0x6F12, 0x1E80,
	0x6F12, 0x2000,
	0x6F12, 0x4C00,
	0x6F12, 0x0000,
	0x6F12, 0x0000,
	0x6F12, 0x2DE9,
	0x6F12, 0xF041,
	0x6F12, 0x2D4D,
	0x6F12, 0x0646,
	0x6F12, 0x0022,
	0x6F12, 0x6968,
	0x6F12, 0x0C0C,
	0x6F12, 0x8FB2,
	0x6F12, 0x3946,
	0x6F12, 0x2046,
	0x6F12, 0x00F0,
	0x6F12, 0x5EF8,
	0x6F12, 0x3046,
	0x6F12, 0x00F0,
	0x6F12, 0x60F8,
	0x6F12, 0x0122,
	0x6F12, 0x3946,
	0x6F12, 0x2046,
	0x6F12, 0x00F0,
	0x6F12, 0x56F8,
	0x6F12, 0x2548,
	0x6F12, 0xB0F8,
	0x6F12, 0x5800,
	0x6F12, 0x2860,
	0x6F12, 0xBDE8,
	0x6F12, 0xF081,
	0x6F12, 0x2DE9,
	0x6F12, 0xF041,
	0x6F12, 0x204E,
	0x6F12, 0x8846,
	0x6F12, 0x0446,
	0x6F12, 0xB168,
	0x6F12, 0x0022,
	0x6F12, 0x0D0C,
	0x6F12, 0x8FB2,
	0x6F12, 0x3946,
	0x6F12, 0x2846,
	0x6F12, 0x00F0,
	0x6F12, 0x43F8,
	0x6F12, 0x7088,
	0x6F12, 0x2080,
	0x6F12, 0x4146,
	0x6F12, 0x2046,
	0x6F12, 0x00F0,
	0x6F12, 0x47F8,
	0x6F12, 0x3946,
	0x6F12, 0x2846,
	0x6F12, 0xBDE8,
	0x6F12, 0xF041,
	0x6F12, 0x0122,
	0x6F12, 0x00F0,
	0x6F12, 0x36B8,
	0x6F12, 0x0179,
	0x6F12, 0x8079,
	0x6F12, 0x01B9,
	0x6F12, 0x48B1,
	0x6F12, 0x0121,
	0x6F12, 0x401E,
	0x6F12, 0x8140,
	0x6F12, 0x1F23,
	0x6F12, 0x8B43,
	0x6F12, 0x0422,
	0x6F12, 0x1149,
	0x6F12, 0x0220,
	0x6F12, 0x00F0,
	0x6F12, 0x37B8,
	0x6F12, 0x1F21,
	0x6F12, 0x0220,
	0x6F12, 0x00F0,
	0x6F12, 0x38B8,
	0x6F12, 0x10B5,
	0x6F12, 0x0022,
	0x6F12, 0xAFF2,
	0x6F12, 0x5F01,
	0x6F12, 0x0C48,
	0x6F12, 0x00F0,
	0x6F12, 0x36F8,
	0x6F12, 0x084C,
	0x6F12, 0x0022,
	0x6F12, 0xAFF2,
	0x6F12, 0x9F01,
	0x6F12, 0xA060,
	0x6F12, 0x0948,
	0x6F12, 0x00F0,
	0x6F12, 0x2EF8,
	0x6F12, 0x0022,
	0x6F12, 0xAFF2,
	0x6F12, 0x4701,
	0x6F12, 0x6060,
	0x6F12, 0x0748,
	0x6F12, 0x00F0,
	0x6F12, 0x27F8,
	0x6F12, 0xE060,
	0x6F12, 0x10BD,
	0x6F12, 0x2000,
	0x6F12, 0x3230,
	0x6F12, 0x2000,
	0x6F12, 0x1CC0,
	0x6F12, 0x0000,
	0x6F12, 0x5553,
	0x6F12, 0x0000,
	0x6F12, 0x75C7,
	0x6F12, 0x0000,
	0x6F12, 0x71B1,
	0x6F12, 0x0000,
	0x6F12, 0x0635,
	0x6F12, 0x40F6,
	0x6F12, 0x4F0C,
	0x6F12, 0xC0F2,
	0x6F12, 0x000C,
	0x6F12, 0x6047,
	0x6F12, 0x47F2,
	0x6F12, 0xB11C,
	0x6F12, 0xC0F2,
	0x6F12, 0x000C,
	0x6F12, 0x6047,
	0x6F12, 0x47F2,
	0x6F12, 0xC75C,
	0x6F12, 0xC0F2,
	0x6F12, 0x000C,
	0x6F12, 0x6047,
	0x6F12, 0x40F2,
	0x6F12, 0xCD2C,
	0x6F12, 0xC0F2,
	0x6F12, 0x000C,
	0x6F12, 0x6047,
	0x6F12, 0x40F2,
	0x6F12, 0x473C,
	0x6F12, 0xC0F2,
	0x6F12, 0x000C,
	0x6F12, 0x6047,
	0x6F12, 0x4DF6,
	0x6F12, 0x4B2C,
	0x6F12, 0xC0F2,
	0x6F12, 0x000C,
	0x6F12, 0x6047,
	0x6F12, 0x30D3,
	0x6F12, 0x02AB,
	0x6F12, 0x0000,
	0x6F12, 0x0001,
	0x6028, 0x4000,
	0x0216, 0x0000,
	0x3D70, 0x0002,
	0x3D6A, 0x0001,
	0x3D66, 0x0105,
	0x3D64, 0x0105,
	0x3D6C, 0x0080,
	0xF496, 0x0048,
	0xF470, 0x0008,
	0xF43A, 0x0015,
	0x3676, 0x0008,
	0x3678, 0x0008,
	0x32A8, 0x000C,
	0x3238, 0x000B,
	0x3230, 0x000C,
	0x3AC8, 0x0A04,
	0x322E, 0x000C,
	0x3236, 0x000B,
	0x32A6, 0x000C,
	0x362A, 0x0303,
	0xF442, 0x44C6,
	0xF408, 0xFFF7,
	0x3666, 0x030B,
	0x3664, 0x0019,
	0x32F8, 0x0003,
	0x32F0, 0x0001,
	0x3616, 0x0707,
	0x3622, 0x0808,
	0x3626, 0x0808,
	0x32EE, 0x0001,
	0x32F6, 0x0003,
	0x361E, 0x3030,
	0x3670, 0x0001,
	0x31B6, 0x0008,
	0xF4D0, 0x0034,
	0xF4D8, 0x0034,
	0xF636, 0x00D6,
	0xF638, 0x00DE,
	0xF63A, 0x00EE,
	0xF63C, 0x00F6,
	0xF63E, 0x0106,
	0xF640, 0x010E,
	0x3D34, 0x0010,
	0x0200, 0x0618,
	0x021E, 0x0400,
	0x021C, 0x0000,
	0x30A0, 0x0008,
	0x0112, 0x0A0A,
	0x3606, 0x0104,
	0x0B00, 0x0080,
	0x3070, 0x0100,
	0x0B04, 0x0101,
	0x0B08, 0x0000,
	0x3090, 0x0904,
	0x3058, 0x0001,
	0x3150, 0x1838,
	0x6028, 0x2000,
	0x602A, 0x157C,
	0x6F12, 0x0100,
	0x602A, 0x15F0,
	0x6F12, 0x0101,
	0x602A, 0x1898,
	0x6F12, 0x0101,

#else
	0x6214, 0x7971,
	0x6218, 0x7150,
	0x6028, 0x4000,
	0x0216, 0x0000,
	0x3D70, 0x0002,
	0x3D6A, 0x0001,
	0x3D66, 0x0105,
	0x3D64, 0x0105,
	0x3D6C, 0x0080,
	0xF496, 0x0048,
	0xF470, 0x0008,
	0xF43A, 0x0015,
	0x3676, 0x0008,
	0x3678, 0x0008,
	0x32A8, 0x000C,
	0x3238, 0x000B,
	0x3230, 0x000C,
	0x3AC8, 0x0A04,
	0x322E, 0x000C,
	0x3236, 0x000B,
	0x32A6, 0x000C,
	0x362A, 0x0303,
	0xF442, 0x44C6,
	0xF408, 0xFFF7,
	0x3666, 0x030B,
	0x3664, 0x0019,
	0x32F8, 0x0003,
	0x32F0, 0x0001,
	0x3616, 0x0707,
	0x3622, 0x0808,
	0x3626, 0x0808,
	0x32EE, 0x0001,
	0x32F6, 0x0003,
	0x361E, 0x3030,
	0x3670, 0x0001,
	0x31B6, 0x0008,
	0xF4D0, 0x0034,
	0xF4D8, 0x0034,
	0xF636, 0x00D6,
	0xF638, 0x00DE,
	0xF63A, 0x00EE,
	0xF63C, 0x00F6,
	0xF63E, 0x0106,
	0xF640, 0x010E,
	0x3D34, 0x0010,
	0x0200, 0x0618,
	0x021E, 0x0400,
	0x021C, 0x0000,
	0x30A0, 0x0008,
	0x0112, 0x0A0A,
	0x3606, 0x0104,
	0x0B00, 0x0080,
	0x3070, 0x0100,
	0x0B04, 0x0101,
	0x0B08, 0x0000,
	0x3090, 0x0904,
	0x3058, 0x0001,
	0x3150, 0x1838,
	0x6028, 0x2000,
	0x602A, 0x157C,
	0x6F12, 0x0100,
	0x602A, 0x15F0,
	0x6F12, 0x0101,
	0x602A, 0x1898,
	0x6F12, 0x0101,
#endif
};

static void sensor_init_v2(void)
{
	write_cmos_sensor(0x6028, 0x4000);
	write_cmos_sensor(0x6010, 0x0001);
	mdelay(3);

	table_write_cmos_sensor(addr_data_pair_init_v2_s5k3m3,
				sizeof(addr_data_pair_init_v2_s5k3m3) / sizeof(kal_uint16));
}				/*      sensor_init  */

static kal_uint16 addr_data_pair_preview_v2_s5k3m3[] = {
	0x6028, 0x4000,
	0x6214, 0x7971,
	0x6218, 0x7150,
	0x0344, 0x0008,
	0x0346, 0x0008,
	0x0348, 0x1077,
	0x034A, 0x0C37,
	0x034C, 0x0838,
	0x034E, 0x0618,
	0x0340, 0x0699,
	0x0342, 0x24C0,
	0x3000, 0x0001,
	0x0900, 0x0112,
	0x0380, 0x0001,
	0x0382, 0x0001,
	0x0384, 0x0001,
	0x0386, 0x0003,
	0x0400, 0x0001,
	0x0404, 0x0020,
	0x3002, 0x0001,
	0x0136, 0x1800,
	0x0300, 0x0004,
	0x0302, 0x0001,
	0x0304, 0x0006,
	0x0306, 0x0078,
	0x0308, 0x0008,
	0x030A, 0x0001,
	0x030C, 0x0004,
	0x030E, 0x0032,
	0x0202, 0x059D,
	0x0204, 0x0020,
	0x0206, 0x0020,
#ifdef VCPDAF
	0X0B0E, 0X0100,
#else
	0X0B0E, 0X0000,
#endif
	0x3D06, 0x0010,
#ifdef VCPDAF_PRE
	0X6028, 0X2000,
	0X602A, 0X19E0,
	0X6F12, 0X0000,
	0X6028, 0X4000,
	0X30E2, 0X0001,
	0X317A, 0X0115,
#else
	0X6028, 0X2000,
	0X602A, 0X19E0,
	0X6F12, 0X0001,
	0X6028, 0X4000,
	0X30E2, 0X0000,
	0X317A, 0X0007,
#endif
	0x6028, 0x2000,
	0x602A, 0x2F34,
	0x6F12, 0x0100,
	0x6028, 0x4000,
	0x0114, 0x0300,
	0x0110, 0x1002,
	0xF440, 0x006F,
	0xF494, 0x0020,
	0xF4CC, 0x0029,
	0xF4CE, 0x002C,
	0xF4D2, 0x0035,
	0xF4D4, 0x0038,
	0xF4D6, 0x0039,
	0xF4DA, 0x0035,
	0xF4DC, 0x0038,
	0xF4DE, 0x0039,
	0x3604, 0x0000,
};

static void preview_setting_v2(kal_uint16 fps)
{
	write_cmos_sensor_byte(0x0100, 0x00);
	check_stremoff(fps);
	table_write_cmos_sensor(addr_data_pair_preview_v2_s5k3m3,
				sizeof(addr_data_pair_preview_v2_s5k3m3) / sizeof(kal_uint16));

	write_cmos_sensor_byte(0x0100, 0x01);

}				/*      preview_setting  */


static kal_uint16 addr_data_pair_capture_v2_s5k3m3[] = {
	0x6028, 0x4000,
	0x6214, 0x7971,
	0x6218, 0x7150,
	0x0344, 0x0008,
	0x0346, 0x0008,
	0x0348, 0x1077,
	0x034A, 0x0C37,
	0x034C, 0x1070,
	0x034E, 0x0C30,
	0x0340, 0x0D47,
	0x0342, 0x1260,
	0x3000, 0x0001,
	0x0900, 0x0011,
	0x0380, 0x0001,
	0x0382, 0x0001,
	0x0384, 0x0001,
	0x0386, 0x0001,
	0x0400, 0x0000,
	0x0404, 0x0010,
	0x3002, 0x0001,
	0x0136, 0x1800,
	0x0300, 0x0004,
	0x0302, 0x0001,
	0x0304, 0x0006,
	0x0306, 0x0078,
	0x0308, 0x0008,
	0x030A, 0x0001,
	0x030C, 0x0004,
	0x030E, 0x0062,
	0x0202, 0x0D1F,
	0x0204, 0x0020,
	0x0206, 0x0020,
#ifdef VCPDAF
	0X0B0E, 0X0100,
#else
	0X0B0E, 0X0000,
#endif
	0x3D06, 0x0010,
#ifdef VCPDAF
	0X6028, 0X2000,
	0X602A, 0X19E0,
	0X6F12, 0X0000,
	0X6028, 0X4000,
	0X30E2, 0X0001,
	0X317A, 0X0115,
#else
	0X6028, 0X2000,
	0X602A, 0X19E0,
	0X6F12, 0X0001,
	0X6028, 0X4000,
	0X30E2, 0X0000,
	0X317A, 0X0007,
#endif
	0x6028, 0x2000,
	0x602A, 0x2F34,
	0x6F12, 0x0000,
	0x6028, 0x4000,
	0x0114, 0x0300,
	0x0110, 0x1002,
	0xF440, 0x002F,
	0xF494, 0x0030,
	0xF4CC, 0x0029,
	0xF4CE, 0x002C,
	0xF4D2, 0x0035,
	0xF4D4, 0x0038,
	0xF4D6, 0x0039,
	0xF4DA, 0x0035,
	0xF4DC, 0x0038,
	0xF4DE, 0x0039,
	0x3604, 0x0000,
};

static void capture_setting_v2(kal_uint16 currefps)
{
	write_cmos_sensor_byte(0x0100, 0x00);
	check_stremoff(currefps);
	table_write_cmos_sensor(addr_data_pair_capture_v2_s5k3m3,
				sizeof(addr_data_pair_capture_v2_s5k3m3) / sizeof(kal_uint16));

	write_cmos_sensor_byte(0x0100, 0x01);
}

static kal_uint16 addr_data_pair_hsvideo_v2_s5k3m3[] = {
	0x6028, 0x4000,
	0x6214, 0x7971,
	0x6218, 0x7150,
	0x0344, 0x00C0,
	0x0346, 0x01E8,
	0x0348, 0x0FBF,
	0x034A, 0x0A57,
	0x034C, 0x0500,
	0x034E, 0x02D0,
	0x0340, 0x0380,
	0x0342, 0x1168,
	0x3000, 0x0000,
	0x0900, 0x0113,
	0x0380, 0x0001,
	0x0382, 0x0001,
	0x0384, 0x0001,
	0x0386, 0x0005,
	0x0400, 0x0001,
	0x0404, 0x0030,
	0x3002, 0x0001,
	0x0136, 0x1800,
	0x0300, 0x0004,
	0x0302, 0x0001,
	0x0304, 0x0006,
	0x0306, 0x0078,
	0x0308, 0x0008,
	0x030A, 0x0001,
	0x030C, 0x0004,
	0x030E, 0x0032,
	0x0202, 0x0369,
	0x0204, 0x0020,
	0x0206, 0x0020,
	0x0B0E, 0x0000,
	0x3D06, 0x0010,
	0x6028, 0x2000,
	0x602A, 0x19E0,
	0x6F12, 0x0001,
	0x6028, 0x4000,
	0x30E2, 0x0000,
	0x317A, 0x0007,
	0x6028, 0x2000,
	0x602A, 0x2F34,
	0x6F12, 0x0100,
	0x6028, 0x4000,
	0x0114, 0x0300,
	0x0110, 0x1002,
	0xF440, 0x00AF,
	0xF494, 0x0020,
	0xF4CC, 0x0028,
	0xF4CE, 0x0028,
	0xF4D2, 0x0034,
	0xF4D4, 0x0FFF,
	0xF4D6, 0x0FFF,
	0xF4DA, 0x0034,
	0xF4DC, 0x0FFF,
	0xF4DE, 0x0FFF,
	0x3604, 0x0001,
};

static void hs_video_setting_v2(kal_uint16 fps)
{
	write_cmos_sensor_byte(0x0100, 0x00);
	check_stremoff(fps);
	table_write_cmos_sensor(addr_data_pair_hsvideo_v2_s5k3m3,
				sizeof(addr_data_pair_hsvideo_v2_s5k3m3) / sizeof(kal_uint16));

	write_cmos_sensor_byte(0x0100, 0x01);

}

static kal_uint16 addr_data_pair_slimvideo_v2_s5k3m3[] = {
	0x6028, 0x4000,
	0x6214, 0x7971,
	0x6218, 0x7150,
	0x0344, 0x00C0,
	0x0346, 0x01E8,
	0x0348, 0x0FBF,
	0x034A, 0x0A57,
	0x034C, 0x0500,
	0x034E, 0x02D0,
	0x0340, 0x0699,
	0x0342, 0x24C0,
	0x3000, 0x0000,
	0x0900, 0x0113,
	0x0380, 0x0001,
	0x0382, 0x0001,
	0x0384, 0x0001,
	0x0386, 0x0005,
	0x0400, 0x0001,
	0x0404, 0x0030,
	0x3002, 0x0001,
	0x0136, 0x1800,
	0x0300, 0x0004,
	0x0302, 0x0001,
	0x0304, 0x0006,
	0x0306, 0x0078,
	0x0308, 0x0008,
	0x030A, 0x0001,
	0x030C, 0x0004,
	0x030E, 0x0032,
	0x0202, 0x0369,
	0x0204, 0x0020,
	0x0206, 0x0020,
	0x0B0E, 0x0000,
	0x3D06, 0x0010,
	0x6028, 0x2000,
	0x602A, 0x19E0,
	0x6F12, 0x0001,
	0x6028, 0x4000,
	0x30E2, 0x0000,
	0x317A, 0x0007,
	0x6028, 0x2000,
	0x602A, 0x2F34,
	0x6F12, 0x0100,
	0x6028, 0x4000,
	0x0114, 0x0300,
	0x0110, 0x1002,
	0xF440, 0x00AF,
	0xF494, 0x0020,
	0xF4CC, 0x0028,
	0xF4CE, 0x0028,
	0xF4D2, 0x0034,
	0xF4D4, 0x0FFF,
	0xF4D6, 0x0FFF,
	0xF4DA, 0x0034,
	0xF4DC, 0x0FFF,
	0xF4DE, 0x0FFF,
	0x3604, 0x0001,
};

static void slim_video_setting_v2(kal_uint16 fps)
{
	write_cmos_sensor_byte(0x0100, 0x00);
	check_stremoff(fps);
	table_write_cmos_sensor(addr_data_pair_slimvideo_v2_s5k3m3,
				sizeof(addr_data_pair_slimvideo_v2_s5k3m3) / sizeof(kal_uint16));

	write_cmos_sensor_byte(0x0100, 0x01);
}

static kal_uint16 addr_data_pair_custom1_v2_s5k3m3[] = {
	0x6028, 0x4000,
	0x6214, 0x7971,
	0x6218, 0x7150,
	0x0344, 0x0008,
	0x0346, 0x0008,
	0x0348, 0x1077,
	0x034A, 0x0C37,
	0x034C, 0x1070,
	0x034E, 0x0C30,
	0x0340, 0x0D2F,
	0x0342, 0x1716,
	0x3000, 0x0001,
	0x0900, 0x0011,
	0x0380, 0x0001,
	0x0382, 0x0001,
	0x0384, 0x0001,
	0x0386, 0x0001,
	0x0400, 0x0000,
	0x0404, 0x0010,
	0x3002, 0x0001,
	0x0136, 0x1800,
	0x0300, 0x0004,
	0x0302, 0x0001,
	0x0304, 0x0006,
	0x0306, 0x0078,
	0x0308, 0x0008,
	0x030A, 0x0001,
	0x030C, 0x0004,
	0x030E, 0x004e,
	0x0202, 0x0D1F,
	0x0204, 0x0020,
	0x0206, 0x0020,
#ifdef VCPDAF
	0X0B0E, 0X0100,
#else
	0X0B0E, 0X0000,
#endif
	0x3D06, 0x0010,
#ifdef VCPDAF
	0X6028, 0X2000,
	0X602A, 0X19E0,
	0X6F12, 0X0000,
	0X6028, 0X4000,
	0X30E2, 0X0001,
	0X317A, 0X0115,
#else
	0X6028, 0X2000,
	0X602A, 0X19E0,
	0X6F12, 0X0001,
	0X6028, 0X4000,
	0X30E2, 0X0000,
	0X317A, 0X0007,
#endif
	0x6028, 0x2000,
	0x602A, 0x2F34,
	0x6F12, 0x0000,
	0x6028, 0x4000,
	0x0114, 0x0300,
	0x0110, 0x1002,
	0xF440, 0x002F,
	0xF494, 0x0030,
	0xF4CC, 0x0029,
	0xF4CE, 0x002C,
	0xF4D2, 0x0035,
	0xF4D4, 0x0038,
	0xF4D6, 0x0039,
	0xF4DA, 0x0035,
	0xF4DC, 0x0038,
	0xF4DE, 0x0039,
	0x3604, 0x0000,
};

static void custom1_setting_v2(kal_uint16 fps)
{
	write_cmos_sensor_byte(0x0100, 0x00);
	check_stremoff(fps);
	table_write_cmos_sensor(addr_data_pair_custom1_v2_s5k3m3,
				sizeof(addr_data_pair_custom1_v2_s5k3m3) / sizeof(kal_uint16));

	write_cmos_sensor_byte(0x0100, 0x01);
}

static kal_uint16 addr_data_pair_custom2_v2_s5k3m3[] = {
	0x6028, 0x4000,
	0x6214, 0x7971,
	0x6218, 0x7150,
	0x0344, 0x0008,
	0x0346, 0x0008,
	0x0348, 0x1077,
	0x034A, 0x0C37,
	0x034C, 0x0838,
	0x034E, 0x0618,
	0x0340, 0x0840,
	0x0342, 0x24C0,
	0x3000, 0x0001,
	0x0900, 0x0112,
	0x0380, 0x0001,
	0x0382, 0x0001,
	0x0384, 0x0001,
	0x0386, 0x0003,
	0x0400, 0x0001,
	0x0404, 0x0020,
	0x3002, 0x0001,
	0x0136, 0x1800,
	0x0300, 0x0004,
	0x0302, 0x0001,
	0x0304, 0x0006,
	0x0306, 0x0078,
	0x0308, 0x0008,
	0x030A, 0x0001,
	0x030C, 0x0004,
	0x030E, 0x0032,
	0x0202, 0x059D,
	0x0204, 0x0020,
	0x0206, 0x0020,
#ifdef VCPDAF
	0X0B0E, 0X0100,
#else
	0X0B0E, 0X0000,
#endif
	0x3D06, 0x0010,
#ifdef VCPDAF_PRE
	0X6028, 0X2000,
	0X602A, 0X19E0,
	0X6F12, 0X0000,
	0X6028, 0X4000,
	0X30E2, 0X0001,
	0X317A, 0X0115,
#else
	0X6028, 0X2000,
	0X602A, 0X19E0,
	0X6F12, 0X0001,
	0X6028, 0X4000,
	0X30E2, 0X0000,
	0X317A, 0X0007,
#endif
	0x6028, 0x2000,
	0x602A, 0x2F34,
	0x6F12, 0x0100,
	0x6028, 0x4000,
	0x0114, 0x0300,
	0x0110, 0x1002,
	0xF440, 0x006F,
	0xF494, 0x0020,
	0xF4CC, 0x0029,
	0xF4CE, 0x002C,
	0xF4D2, 0x0035,
	0xF4D4, 0x0038,
	0xF4D6, 0x0039,
	0xF4DA, 0x0035,
	0xF4DC, 0x0038,
	0xF4DE, 0x0039,
	0x3604, 0x0000,
};

static void custom2_setting_v2(kal_uint16 fps)
{
	write_cmos_sensor_byte(0x0100, 0x00);
	check_stremoff(fps);
	table_write_cmos_sensor(addr_data_pair_custom2_v2_s5k3m3,
				sizeof(addr_data_pair_custom2_v2_s5k3m3) / sizeof(kal_uint16));

	write_cmos_sensor_byte(0x0100, 0x01);
}

#endif
