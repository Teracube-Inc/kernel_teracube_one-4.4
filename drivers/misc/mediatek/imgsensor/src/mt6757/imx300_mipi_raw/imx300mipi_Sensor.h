/*
 * Copyright (C) 2016 MediaTek Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See http://www.gnu.org/licenses/gpl-2.0.html for more details.
 */

/*****************************************************************************
 *
 * Filename:
 * ---------
 *     IMX300mipi_Sensor.h
 *
 * Project:
 * --------
 *     ALPS
 *
 * Description:
 * ------------
 *     CMOS sensor header file
 *
 ****************************************************************************/
#ifndef _IMX300MIPI_SENSOR_H
#define _IMX300MIPI_SENSOR_H


typedef enum {
	IMGSENSOR_MODE_INIT,
	IMGSENSOR_MODE_PREVIEW,
	IMGSENSOR_MODE_CAPTURE,
	IMGSENSOR_MODE_VIDEO,
	IMGSENSOR_MODE_HIGH_SPEED_VIDEO,
	IMGSENSOR_MODE_SLIM_VIDEO,
	IMGSENSOR_MODE_CUSTOM1,
	IMGSENSOR_MODE_CUSTOM2,
	IMGSENSOR_MODE_CUSTOM3,
	IMGSENSOR_MODE_CUSTOM4,
	IMGSENSOR_MODE_CUSTOM5,
} IMGSENSOR_MODE;

typedef struct imgsensor_mode_struct {
	kal_uint32 pclk;	/* record different mode's pclk */
	kal_uint32 linelength;	/* record different mode's linelength */
	kal_uint32 framelength;	/* record different mode's framelength */

	kal_uint8 startx;	/* record different mode's startx of grabwindow */
	kal_uint8 starty;	/* record different mode's startx of grabwindow */

	kal_uint16 grabwindow_width;	/* record different mode's width of grabwindow */
	kal_uint16 grabwindow_height;	/* record different mode's height of grabwindow */

	/*     following for MIPIDataLowPwr2HighSpeedSettleDelayCount by different scenario    */
	kal_uint8 mipi_data_lp2hs_settle_dc;

	/*     following for GetDefaultFramerateByScenario()    */
	kal_uint16 max_framerate;

} imgsensor_mode_struct;

/* SENSOR PRIVATE STRUCT FOR VARIABLES*/
typedef struct imgsensor_struct {
	kal_uint8 mirror;	/* mirrorflip information */

	kal_uint8 sensor_mode;	/* record IMGSENSOR_MODE enum value */

	kal_uint32 shutter;	/* current shutter */
	kal_uint16 gain;	/* current gain */

	kal_uint32 pclk;	/* current pclk */

	kal_uint32 frame_length;	/* current framelength */
	kal_uint32 line_length;	/* current linelength */

	kal_uint32 min_frame_length;	/* current min  framelength to max framerate */
	kal_uint16 dummy_pixel;	/* current dummypixel */
	kal_uint16 dummy_line;	/* current dummline */

	kal_uint16 current_fps;	/* current max fps */
	kal_bool autoflicker_en;	/* record autoflicker enable or disable */
	kal_bool test_pattern;	/* record test pattern mode or not */
	MSDK_SCENARIO_ID_ENUM current_scenario_id;	/* current scenario id */
	kal_uint8 ihdr_mode;	/* ihdr enable or disable */
	kal_uint8 pdaf_mode;	/* ihdr enable or disable */
	kal_uint8 i2c_write_id;	/* record current sensor's i2c write id */
} imgsensor_struct;

/* SENSOR PRIVATE STRUCT FOR CONSTANT*/
typedef struct imgsensor_info_struct {
	kal_uint32 sensor_id;	/* record sensor id defined in Kd_imgsensor.h */
	kal_uint32 checksum_value;	/* checksum value for Camera Auto Test */
	imgsensor_mode_struct pre;	/* preview scenario relative information */
	imgsensor_mode_struct cap;	/* capture scenario relative information */
	imgsensor_mode_struct cap1;	/* capture for PIP 24fps relative information,
					 * capture1 mode must use same framelength,
					 * linelength with Capture mode for shutter calculate
					 */
	imgsensor_mode_struct normal_video;	/* normal video  scenario relative information */
	imgsensor_mode_struct hs_video;	/* high speed video scenario relative information */
	imgsensor_mode_struct slim_video;	/* slim video for VT scenario relative information */
	imgsensor_mode_struct custom1;	/* custom1 scenario relative information */
	imgsensor_mode_struct custom2;	/* custom2 scenario relative information */
	imgsensor_mode_struct custom3;	/* custom3 scenario relative information */
	imgsensor_mode_struct custom4;	/* custom4 scenario relative information */
	imgsensor_mode_struct custom5;

	kal_uint8 ae_shut_delay_frame;	/* shutter delay frame for AE cycle */
	kal_uint8 ae_sensor_gain_delay_frame;	/* sensor gain delay frame for AE cycle */
	kal_uint8 ae_ispGain_delay_frame;	/* isp gain delay frame for AE cycle */
	kal_uint8 ihdr_support;	/* 1, support; 0,not support */
	kal_uint8 ihdr_le_firstline;	/* 1,le first ; 0, se first */
	kal_uint8 sensor_mode_num;	/* support sensor mode num */

	kal_uint8 cap_delay_frame;	/* enter capture delay frame num */
	kal_uint8 pre_delay_frame;	/* enter preview delay frame num */
	kal_uint8 video_delay_frame;	/* enter video delay frame num */
	kal_uint8 hs_video_delay_frame;	/* enter high speed video  delay frame num */
	kal_uint8 slim_video_delay_frame;	/* enter slim video delay frame num */

	kal_uint8 margin;	/* sensor framelength & shutter margin */
	kal_uint32 min_shutter;	/* min shutter */
	kal_uint32 max_frame_length;	/* max framelength by sensor register's limitation */

	kal_uint8 isp_driving_current;	/* mclk driving current */
	kal_uint8 sensor_interface_type;	/* sensor_interface_type */
	kal_uint8 mipi_sensor_type;	/* 0,MIPI_OPHY_NCSI2; 1,MIPI_OPHY_CSI2,
					 * default is NCSI2, don't modify this para
					 */
	kal_uint8 mipi_settle_delay_mode;	/* 0, high speed signal auto detect;
						 * 1, use settle delay,unit is ns,
						 * default is auto detect, don't modify this para
						 */
	kal_uint8 sensor_output_dataformat;	/* sensor output first pixel color */
	kal_uint8 mclk;		/* mclk value, suggest 24 or 26 for 24Mhz or 26Mhz */
	kal_uint32 i2c_speed;	/* i2c speed */
	kal_uint8 mipi_lane_num;	/* mipi lane num */
	kal_uint8 i2c_addr_table[5];	/* record sensor support all write id addr, only supprt 4must end with 0xff */
} imgsensor_info_struct;

/* SENSOR READ/WRITE ID */
/* #define IMGSENSOR_WRITE_ID_1 (0x6c) */
/* #define IMGSENSOR_READ_ID_1  (0x6d) */
/* #define IMGSENSOR_WRITE_ID_2 (0x20) */
/* #define IMGSENSOR_READ_ID_2  (0x21) */

extern int iReadRegI2C(u8 *a_pSendData, u16 a_sizeSendData, u8 *a_pRecvData, u16 a_sizeRecvData,
		       u16 i2cId);
extern int iWriteRegI2C(u8 *a_pSendData, u16 a_sizeSendData, u16 i2cId);

extern void read_imx230_eeprom(void);
extern void imx300_DCC_conversion(kal_uint16 addr, BYTE *data, kal_uint32 size);
int iBurstWriteReg_multi(u8 *pData, u32 bytes, u16 i2cId, u16 transfer_length, u16 timing);



#define IMX300MIPI_MaxGainIndex (226)	/* 226~448;258~480 */
#define IMX300MIPI_MaxSensorGain (448)
#define ENABLE_DIGITAL_GAIN

kal_uint16 IMX300MIPI_sensorGainMapping[IMX300MIPI_MaxGainIndex][2] = {
	{64, 0},
	{65, 8},
	{66, 16},
	{67, 23},
	{68, 31},
	{69, 38},
	{70, 44},
	{71, 51},
	{72, 57},
	{73, 64},
	{74, 70},
	{75, 76},
	{76, 81},
	{77, 87},
	{78, 92},
	{79, 98},
	{80, 103},
	{81, 108},
	{82, 113},
	{83, 118},
	{84, 122},
	{85, 127},
	{86, 131},
	{87, 136},
	{88, 140},
	{89, 144},
	{90, 148},
	{91, 152},
	{92, 156},
	{93, 160},
	{94, 164},
	{95, 168},
	{96, 171},
	{97, 175},
	{98, 178},
	{99, 182},
	{100, 185},
	{101, 188},
	{102, 191},
	{103, 194},
	{104, 197},
	{105, 200},
	{106, 203},
	{107, 206},
	{108, 209},
	{109, 212},
	{110, 215},
	{111, 217},
	{112, 220},
	{113, 223},
	{114, 225},
	{115, 228},
	{116, 230},
	{117, 232},
	{118, 235},
	{119, 237},
	{120, 239},
	{121, 242},
	{122, 244},
	{123, 246},
	{124, 248},
	{125, 250},
	{126, 252},
	{127, 254},
	{128, 256},
	{129, 258},
	{130, 260},
	{131, 262},
	{132, 264},
	{133, 266},
	{134, 268},
	{135, 270},
	{137, 272},
	{138, 275},
	{139, 277},
	{140, 278},
	{141, 280},
	{142, 282},
	{143, 283},
	{144, 285},
	{146, 287},
	{148, 290},
	{150, 293},
	{151, 295},
	{152, 297},
	{153, 298},
	{155, 300},
	{156, 302},
	{158, 304},
	{159, 306},
	{161, 308},
	{162, 310},
	{163, 311},
	{165, 313},
	{166, 315},
	{167, 316},
	{168, 317},
	{170, 319},
	{171, 320},
	{172, 321},
	{173, 323},
	{174, 324},
	{175, 325},
	{176, 326},
	{177, 327},
	{178, 328},
	{179, 329},
	{180, 330},
	{181, 331},
	{182, 332},
	{183, 333},
	{184, 334},
	{185, 335},
	{186, 336},
	{187, 337},
	{188, 338},
	{189, 339},
	{191, 340},
	{192, 341},
	{193, 342},
	{194, 343},
	{195, 344},
	{196, 345},
	{197, 346},
	{199, 347},
	{200, 348},
	{201, 349},
	{202, 350},
	{204, 351},
	{205, 352},
	{206, 353},
	{207, 354},
	{209, 355},
	{210, 356},
	{211, 357},
	{213, 358},
	{214, 359},
	{216, 360},
	{217, 361},
	{218, 362},
	{220, 363},
	{221, 364},
	{223, 365},
	{224, 366},
	{226, 367},
	{228, 368},
	{229, 369},
	{231, 370},
	{232, 371},
	{234, 372},
	{236, 373},
	{237, 374},
	{239, 375},
	{241, 376},
	{243, 377},
	{245, 378},
	{246, 379},
	{248, 380},
	{250, 381},
	{252, 382},
	{254, 383},
	{256, 384},
	{258, 385},
	{260, 386},
	{262, 387},
	{264, 388},
	{266, 389},
	{269, 390},
	{271, 391},
	{273, 392},
	{275, 393},
	{278, 394},
	{280, 395},
	{282, 396},
	{285, 397},
	{287, 398},
	{290, 399},
	{293, 400},
	{295, 401},
	{298, 402},
	{301, 403},
	{303, 404},
	{306, 405},
	{309, 406},
	{312, 407},
	{315, 408},
	{318, 409},
	{321, 410},
	{324, 411},
	{328, 412},
	{331, 413},
	{334, 414},
	{338, 415},
	{341, 416},
	{345, 417},
	{349, 418},
	{352, 419},
	{356, 420},
	{360, 421},
	{364, 422},
	{368, 423},
	{372, 424},
	{377, 425},
	{381, 426},
	{386, 427},
	{390, 428},
	{395, 429},
	{400, 430},
	{405, 431},
	{410, 432},
	{415, 433},
	{420, 434},
	{426, 435},
	{431, 436},
	{437, 437},
	{443, 438},
	{449, 439},
	{455, 440},
	{462, 441},
	{468, 442},
	{475, 443},
	{482, 444},
	{489, 445},
	{496, 446},
	{504, 447},
	{512, 448},
#if 0
	{520, 449},
	{529, 450},
	{537, 451},
	{546, 452},
	{555, 453},
	{565, 454},
	{575, 455},
	{585, 456},
	{596, 457},
	{607, 458},
	{618, 459},
	{630, 460},
	{643, 461},
	{655, 462},
	{669, 463},
	{683, 464},
	{697, 465},
	{712, 466},
	{728, 467},
	{745, 468},
	{762, 469},
	{780, 470},
	{799, 471},
	{819, 472},
	{840, 473},
	{862, 474},
	{886, 475},
	{910, 476},
	{936, 477},
	{964, 478},
	{993, 479},
	{1024, 480},
#endif

};


kal_uint16 addr_data_pair_init_imx300[] = {
	/* External Clock Setting */
	0x0136, 0x18, 0x0137, 0x00,
	/* Global Setting */
	0x0101, 0x03, 0x0138, 0x01, 0x305D, 0x03,
	/* Fixed area (16x12),Type of AF detection area */
	0x31B0, 0x00, 0x3208, 0x01, 0x3210, 0x00, 0x406C, 0x01, 0x406D, 0x39, 0x430D, 0xAA,
	0x4313, 0x20, 0x431E, 0x88, 0x431F, 0x8F, 0x4321, 0x20, 0x4324, 0x00, 0x4325, 0x05,
	0x4326, 0x28, 0x4328, 0x0D, 0x4329, 0x5B, 0x432C, 0x06, 0x432D, 0x00, 0x432E, 0x00,
	0x4554, 0x01, 0x4811, 0x99, 0x4819, 0x99, 0x481D, 0x9D, 0x481F, 0x99, 0x4838, 0x03,
	0x4839, 0xFF, 0x483A, 0x00, 0x483B, 0x00, 0x4871, 0x99, 0x4877, 0x9B, 0x487D, 0x99,
	0x4883, 0x99, 0x4891, 0x99, 0x4893, 0x9D, 0x48AD, 0x9D, 0x48AF, 0x99, 0x48B1, 0x99,
	0x48B5, 0x99, 0x48BB, 0x9B, 0x48C1, 0x99, 0x48C7, 0x9B, 0x48C9, 0x95, 0x48CB, 0x94,
	0x4BD7, 0x24, 0x48DD, 0x95, 0x48E5, 0x97, 0x49D1, 0x9A, 0x4A00, 0x00, 0x4A01, 0x00,
	0x4A02, 0x03, 0x4A03, 0xFF, 0x4A1D, 0x99, 0x4A1F, 0x9B, 0x4A27, 0x97, 0x4A29, 0x12,
	0x4A2F, 0x97, 0x4A4D, 0x9D, 0x4A4F, 0x99, 0x4A51, 0x9D, 0x4A53, 0x99, 0x4A6D, 0x9E,
	0x4A6F, 0x9D, 0x4BE7, 0x24, 0x4C07, 0x24, 0x4C17, 0x24, 0x4C97, 0x18, 0x4CA7, 0x18,
	0x4CC7, 0x18, 0x4CD7, 0x18, 0x4D57, 0x12, 0x4D67, 0x12, 0x4D87, 0x12, 0x4D97, 0x12,
	0x4DB7, 0x10, 0x4DC7, 0x10, 0x4DE7, 0x10, 0x4DF7, 0x10, 0x4E15, 0x43, 0x4E25, 0x43,
	0x4E45, 0x43, 0x4E55, 0x43, 0x4F40, 0x01, 0x4F42, 0x04, 0x4F48, 0x04, 0x4F4E, 0x01,
	0x505C, 0x35,
	/* 20160812 pdaf date type bmj */
	0x505D, 0x36, 0x505F, 0x35,
	/* ,0x5069,      0x00 */
	/* 20160929  vc id */
	0x5069, 0x01, 0x5E6A, 0xFE, 0x5E70, 0x00, 0x6153, 0x01, 0x6156, 0x01, 0x656A, 0x01,
	0x656B, 0x01, 0x7300, 0x00, 0x9006, 0x09, 0xB000, 0x6E, 0xB001, 0xFD, 0xB002, 0x65,
	0xB003, 0x2A, 0xB004, 0x83, 0xB005, 0x41, 0xB006, 0x83, 0xB007, 0x43, 0xB008, 0x82,
	0xB009, 0x49, 0xB00A, 0x82, 0xB00B, 0x4A, 0xB00C, 0x6E, 0xB00D, 0x93, 0xB00E, 0x82,
	0xB00F, 0x41, 0xB010, 0x82, 0xB011, 0x4B, 0xB100, 0x35, 0xB101, 0x5E, 0xB102, 0x80,
	0xB103, 0x9A, 0xB104, 0xAF, 0xB105, 0xC0, 0xB106, 0xCD, 0xB107, 0xD7, 0xB123, 0x55,
	0xB125, 0x55, 0xB127, 0x55, 0xB129, 0x55, 0xB12B, 0x55, 0xB136, 0x0A, 0xB137, 0x0A,
	0xB138, 0x0A, 0xB139, 0x0A, 0xB13A, 0x0A, 0xB13B, 0x0A, 0xB13C, 0x0A, 0xB13D, 0x0A,
	0xB13E, 0x0A, 0xB13F, 0x0A, 0xB140, 0x04, 0xB141, 0x04, 0xB142, 0x04, 0xB143, 0x0A,
	0xB144, 0x0A, 0xB145, 0x0A, 0xB146, 0x0A, 0xB147, 0x0A, 0xB148, 0x0A, 0xB149, 0x0A,
	0xB14A, 0x05, 0xB14B, 0x05, 0xB14C, 0x05, 0xB14D, 0x0A, 0xB14E, 0x0A, 0xB14F, 0x0A,
	0xB150, 0x0A, 0xB151, 0x0A, 0xB152, 0x0A, 0xB153, 0x0A, 0xB154, 0x03, 0xB155, 0x03,
	0xB156, 0x03, 0xB157, 0x05, 0xB158, 0x05, 0xB159, 0x05, 0xB15A, 0x05, 0xB15B, 0x05,
	0xB15C, 0x05, 0xB15D, 0x05, 0xB210, 0x01,
	/* image quality */
	0x313C, 0x00, 0x3198, 0x0F,
	/* ,0x31A0        ,0x04 */
	/* ,0x31A1        ,0x03 */
	/* ,0x31A2        ,0x02 */
	/* ,0x31A3        ,0x01 */
	0x31A0, 0x02, 0x31A1, 0x02, 0x31A2, 0x02, 0x31A3, 0x03, 0x31A8, 0x18, 0x3290, 0x01,
	0x6D20, 0x00, 0x6D21, 0x01, 0x6D22, 0x01, 0x6D23, 0x01, 0x6D26, 0x00, 0x6D27, 0x00,
	0x6E07, 0x10, 0x6E35, 0x00, 0x6E55, 0x00, 0x6E7C, 0x00, 0x6E93, 0x00, 0x6EFB, 0x01,
	0x7C68, 0x03, 0x845C, 0x01, 0x8469, 0x01, 0x9257, 0x96, 0x9258, 0x03, 0x933A, 0x02,
	0x933B, 0x02, 0x933D, 0x05, 0x933E, 0x05, 0x933F, 0x05, 0x934B, 0x1B, 0x934C, 0x0A,
	0x9356, 0x8C, 0x9357, 0x50, 0x9358, 0x1B, 0x9359, 0x8C, 0x935A, 0x1B, 0x935B, 0x0A,
	0x9360, 0x1B, 0x9361, 0x0A, 0x9362, 0x8C, 0x9363, 0x50, 0x9364, 0x1B, 0x9365, 0x8C,
	0x9366, 0x1B, 0x9367, 0x0A, 0x940D, 0x07, 0x940E, 0x07, 0x9414, 0x06, 0x942B, 0x09,
	0x942C, 0x09, 0x942D, 0x09, 0x942E, 0x09, 0x942F, 0x09, 0x9430, 0x09, 0x9431, 0x09,
	0x9432, 0x09, 0x9433, 0x09, 0x9434, 0x09, 0x9435, 0x09, 0x9436, 0x09, 0x9437, 0x09,
	0x9438, 0x0B, 0x9439, 0x0B, 0x943B, 0x09, 0x943D, 0x09, 0x943F, 0x09, 0x9441, 0x09,
	0x9443, 0x09, 0x9445, 0x09, 0x9447, 0x09, 0x9449, 0x09, 0x944B, 0x09, 0x944D, 0x09,
	0x944F, 0x09, 0x9451, 0x09, 0x9452, 0x0A, 0x9454, 0x09, 0x9456, 0x09, 0x9457, 0x09,
	0x9458, 0x09, 0x9459, 0x09, 0x945A, 0x09, 0x945B, 0x07, 0x945C, 0x0B, 0x945D, 0x07,
	0x945E, 0x0B, 0x945F, 0x09, 0x9460, 0x09, 0x9461, 0x09, 0x9462, 0x09, 0x9463, 0x09,
	0x9464, 0x09, 0x9465, 0x09, 0x9466, 0x09, 0x947C, 0x01, 0x947D, 0x01, 0x9480, 0x01,
	0x9481, 0x01, 0x9503, 0x05, 0x9504, 0x05, 0x9505, 0x05, 0x9506, 0x00, 0x9507, 0x00,
	0x9508, 0x00, 0x9526, 0x18, 0x9527, 0x18, 0x9528, 0x18, 0x9619, 0xA0, 0x961B, 0xA0,
	0x961D, 0xA0, 0x961F, 0x20, 0x9621, 0x20, 0x9623, 0x20, 0x9625, 0xA0, 0x9627, 0xA0,
	0x9629, 0xA0, 0x962B, 0x20, 0x962D, 0x20, 0x962F, 0x20, 0x9719, 0xA0, 0x971b, 0xA0,
	0x971d, 0xA0, 0x971f, 0x20, 0x9721, 0x20, 0x9723, 0x20, 0x9725, 0xA0, 0x9727, 0xA0,
	0x9729, 0xA0, 0x972B, 0x20, 0x972D, 0x20, 0x972f, 0x20, 0x9901, 0x35, 0x9903, 0x23,
	0x9905, 0x23, 0x9906, 0x00, 0x9907, 0x31, 0x9908, 0x00, 0x9909, 0x1B, 0x990A, 0x00,
	0x990B, 0x15, 0x990D, 0x3F, 0x990F, 0x3F, 0x9911, 0x3F, 0x9913, 0x64, 0x9915, 0x64,
	0x9917, 0x64, 0x9919, 0x50, 0x991B, 0x60, 0x991D, 0x65, 0x991F, 0x01, 0x9921, 0x01,
	0x9923, 0x01, 0x9925, 0x23, 0x9927, 0x23, 0x9929, 0x23, 0x992B, 0x2F, 0x992D, 0x1A,
	0x992F, 0x14, 0x9931, 0x3F, 0x9933, 0x3F, 0x9935, 0x3F, 0x9937, 0x6B, 0x9939, 0x7C,
	0x993B, 0x81, 0x9943, 0x0F, 0x9945, 0x0F, 0x9947, 0x0F, 0x9949, 0x0F, 0x994B, 0x0F,
	0x994D, 0x0F, 0x994F, 0x42, 0x9951, 0x0F, 0x9953, 0x0B, 0x9955, 0x5A, 0x9957, 0x13,
	0x9959, 0x0C, 0x995A, 0x00, 0x995B, 0x00, 0x995C, 0x00, 0x996B, 0x00, 0x996D, 0x10,
	0x996F, 0x10, 0x9971, 0xC8, 0x9973, 0x32, 0x9975, 0x04, 0x9976, 0x0A, 0x9979, 0xE0,
	0x997A, 0xE0, 0x997B, 0xE0, 0x9981, 0x14, 0x9983, 0x14, 0x9985, 0x14, 0x99A4, 0x2F,
	0x99A5, 0x2F, 0x99A6, 0x2F, 0x99A7, 0x0A, 0x99A8, 0x0A, 0x99A9, 0x0A, 0x99AA, 0x2F,
	0x99AB, 0x2F, 0x99AC, 0x2F, 0x99AD, 0x00, 0x99AE, 0x00, 0x99AF, 0x00, 0x99B0, 0x40,
	0x99B1, 0x40, 0x99B2, 0x40, 0x99B3, 0x30, 0x99B4, 0x30, 0x99B5, 0x30, 0x99BB, 0x0A,
	0x99BD, 0x0A, 0x99BF, 0x0A, 0x99C0, 0x09, 0x99C1, 0x09, 0x99C2, 0x09, 0x99C6, 0x3C,
	0x99C7, 0x3C, 0x99C8, 0x3C, 0x99C9, 0xFF, 0x99CA, 0xFF, 0x99CB, 0xFF, 0x9A01, 0x35,
	0x9A03, 0x14, 0x9A05, 0x14, 0x9A07, 0x31, 0x9A09, 0x1B, 0x9A0B, 0x15, 0x9A0D, 0x1E,
	0x9A0F, 0x1E, 0x9A11, 0x1E, 0x9A13, 0x64, 0x9A15, 0x64, 0x9A17, 0x64, 0x9A19, 0x50,
	0x9A1B, 0x60, 0x9A1D, 0x65, 0x9A1F, 0x01, 0x9A21, 0x01, 0x9A23, 0x01, 0x9A25, 0x14,
	0x9A27, 0x14, 0x9A29, 0x14, 0x9A2B, 0x2F, 0x9A2D, 0x1A, 0x9A2F, 0x14, 0x9A31, 0x1E,
	0x9A33, 0x1E, 0x9A35, 0x1E, 0x9A37, 0x6B, 0x9A39, 0x7C, 0x9A3B, 0x81, 0x9A3D, 0x00,
	0x9A3F, 0x00, 0x9A41, 0x00, 0x9A4F, 0x42, 0x9A51, 0x0F, 0x9A53, 0x0B, 0x9A55, 0x5A,
	0x9A57, 0x13, 0x9A59, 0x0C, 0x9A5A, 0x00, 0x9A5B, 0x00, 0x9A5C, 0x00, 0x9A6B, 0x00,
	0x9A6D, 0x10, 0x9A6F, 0x10, 0x9A71, 0xC8, 0x9A73, 0x32, 0x9A75, 0x04, 0x9A79, 0xE0,
	0x9A7A, 0xE0, 0x9A7B, 0xE0, 0x9A81, 0x14, 0x9A83, 0x14, 0x9A85, 0x14, 0x9AA4, 0x3F,
	0x9AA5, 0x3F, 0x9AA6, 0x3F, 0x9AA7, 0x0A, 0x9AA8, 0x0A, 0x9AA9, 0x0A, 0x9AAA, 0x3F,
	0x9AAB, 0x3F, 0x9AAC, 0x3F, 0x9AAD, 0x00, 0x9AAE, 0x00, 0x9AAF, 0x00, 0x9AB0, 0x40,
	0x9AB1, 0x40, 0x9AB2, 0x40, 0x9AB3, 0x30, 0x9AB4, 0x30, 0x9AB5, 0x30, 0x9AB6, 0xA0,
	0x9AB7, 0xA0, 0x9AB8, 0xA0, 0x9ABB, 0x0A, 0x9ABD, 0x0A, 0x9ABF, 0x0A, 0x9AC0, 0x09,
	0x9AC1, 0x09, 0x9AC2, 0x09, 0x9AC6, 0x2D, 0x9AC7, 0x2D, 0x9AC8, 0x2D, 0x9AC9, 0xFF,
	0x9ACA, 0xFF, 0x9ACB, 0xFF, 0x9B01, 0x35, 0x9B03, 0x14, 0x9B05, 0x14, 0x9B07, 0x31,
	0x9B08, 0x01, 0x9B09, 0x1B, 0x9B0A, 0x01, 0x9B0B, 0x15, 0x9B0D, 0x1E, 0x9B0F, 0x1E,
	0x9B11, 0x1E, 0x9B13, 0x64, 0x9B15, 0x64, 0x9B17, 0x64, 0x9B19, 0x50, 0x9B1B, 0x60,
	0x9B1D, 0x65, 0x9B1F, 0x01, 0x9B21, 0x01, 0x9B23, 0x01, 0x9B25, 0x14, 0x9B27, 0x14,
	0x9B29, 0x14, 0x9B2B, 0x2F, 0x9B2D, 0x1A, 0x9B2F, 0x14, 0x9B31, 0x1E, 0x9B33, 0x1E,
	0x9B35, 0x1E, 0x9B37, 0x6B, 0x9B39, 0x7C, 0x9B3B, 0x81, 0x9B43, 0x0F, 0x9B45, 0x0F,
	0x9B47, 0x0F, 0x9B49, 0x0F, 0x9B4B, 0x0F, 0x9B4D, 0x0F, 0x9B4F, 0x2D, 0x9B51, 0x0B,
	0x9B53, 0x08, 0x9B55, 0x40, 0x9B57, 0x0D, 0x9B59, 0x08, 0x9B5A, 0x00, 0x9B5B, 0x00,
	0x9B5C, 0x00, 0x9B5D, 0x08, 0x9B5E, 0x0E, 0x9B60, 0x08, 0x9B61, 0x0E, 0x9B6B, 0x00,
	0x9B6D, 0x10, 0x9B6F, 0x10, 0x9B71, 0xC8, 0x9B73, 0x32, 0x9B75, 0x04, 0x9B76, 0x0A,
	0x9B79, 0xE0, 0x9B7A, 0xE0, 0x9B7B, 0xE0, 0x9B81, 0x14, 0x9B83, 0x14, 0x9B85, 0x14,
	0x9BB0, 0x40, 0x9BB1, 0x40, 0x9BB2, 0x40, 0x9BB3, 0x30, 0x9BB4, 0x30, 0x9BB5, 0x30,
	0x9BBB, 0x0A, 0x9BBD, 0x0A, 0x9BBF, 0x0A, 0x9BC0, 0x09, 0x9BC1, 0x09, 0x9BC2, 0x09,
	0x9BC6, 0x18, 0x9BC7, 0x18, 0x9BC8, 0x18, 0x9BC9, 0xFF, 0x9BCA, 0xFF, 0x9BCB, 0xFF,
	0x9BCC, 0x20, 0x9BCD, 0x20, 0x9BCE, 0x20, 0x9C01, 0x35, 0x9C03, 0x14, 0x9C05, 0x14,
	0x9C07, 0x31, 0x9C09, 0x1B, 0x9C0B, 0x15, 0x9C0D, 0x1E, 0x9C0F, 0x1E, 0x9C11, 0x1E,
	0x9C13, 0x64, 0x9C15, 0x64, 0x9C17, 0x64, 0x9C19, 0x50, 0x9C1B, 0x60, 0x9C1D, 0x65,
	0x9C1F, 0x01, 0x9C21, 0x01, 0x9C23, 0x01, 0x9C25, 0x14, 0x9C27, 0x14, 0x9C29, 0x14,
	0x9C2B, 0x2F, 0x9C2D, 0x1A, 0x9C2F, 0x14, 0x9C31, 0x1E, 0x9C33, 0x1E, 0x9C35, 0x1E,
	0x9C37, 0x6B, 0x9C39, 0x7C, 0x9C3B, 0x81, 0x9C3D, 0x00, 0x9C3F, 0x00, 0x9C41, 0x00,
	0x9C4F, 0x42, 0x9C51, 0x0B, 0x9C53, 0x08, 0x9C55, 0x5A, 0x9C57, 0x0D, 0x9C59, 0x08,
	0x9C5A, 0x00, 0x9C5B, 0x00, 0x9C5C, 0x00, 0x9C6B, 0x00, 0x9C6D, 0x10, 0x9C6F, 0x10,
	0x9C71, 0xC8, 0x9C73, 0x32, 0x9C75, 0x04, 0x9C79, 0xE0, 0x9C7A, 0xE0, 0x9C7B, 0xE0,
	0x9C81, 0x14, 0x9C83, 0x14, 0x9C85, 0x14, 0x9C87, 0x48, 0x9C89, 0x48, 0x9C8B, 0x48,
	0x9CA4, 0x00, 0x9CA5, 0x00, 0x9CA6, 0x00, 0x9CA7, 0x00, 0x9CA8, 0x00, 0x9CA9, 0x00,
	0x9CAA, 0x00, 0x9CAB, 0x00, 0x9CAC, 0x00, 0x9CAD, 0x00, 0x9CAE, 0x00, 0x9CAF, 0x00,
	0x9CB0, 0x50, 0x9CB1, 0x50, 0x9CB2, 0x50, 0x9CB3, 0x40, 0x9CB4, 0x40, 0x9CB5, 0x40,
	0x9CBB, 0x0A, 0x9CBD, 0x0A, 0x9CBF, 0x0A, 0x9CC0, 0x09, 0x9CC1, 0x09, 0x9CC2, 0x09,
	0x9CC6, 0x18, 0x9CC7, 0x18, 0x9CC8, 0x18, 0x9CC9, 0xFF, 0x9CCA, 0xFF, 0x9CCB, 0xFF,
	0x9D01, 0x35, 0x9D03, 0x14, 0x9D05, 0x14, 0x9D07, 0x31, 0x9D09, 0x1B, 0x9D0B, 0x15,
	0x9D0D, 0x1E, 0x9D0F, 0x1E, 0x9D11, 0x1E, 0x9D13, 0x64, 0x9D15, 0x64, 0x9D17, 0x64,
	0x9D19, 0x50, 0x9D1B, 0x60, 0x9D1D, 0x65, 0x9D1F, 0x01, 0x9D21, 0x01, 0x9D23, 0x01,
	0x9D25, 0x14, 0x9D27, 0x14, 0x9D29, 0x14, 0x9D2B, 0x2F, 0x9D2D, 0x1A, 0x9D2F, 0x14,
	0x9D31, 0x1E, 0x9D33, 0x1E, 0x9D35, 0x1E, 0x9D37, 0x6B, 0x9D39, 0x7C, 0x9D3B, 0x81,
	0x9D3D, 0x00, 0x9D3F, 0x00, 0x9D41, 0x00, 0x9D4F, 0x42, 0x9D50, 0x00, 0x9D51, 0x0F,
	0x9D53, 0x0B, 0x9D55, 0x5A, 0x9D57, 0x13, 0x9D59, 0x0C, 0x9D5B, 0x35, 0x9D5D, 0x14,
	0x9D5F, 0x14, 0x9D61, 0x35, 0x9D63, 0x14, 0x9D65, 0x14, 0x9D67, 0x31, 0x9D69, 0x1B,
	0x9D6B, 0x15, 0x9D6D, 0x31, 0x9D6F, 0x1B, 0x9D71, 0x15, 0x9D73, 0x1E, 0x9D75, 0x1E,
	0x9D77, 0x1E, 0x9D79, 0x1E, 0x9D7B, 0x1E, 0x9D7D, 0x1E, 0x9D7F, 0x64, 0x9D81, 0x64,
	0x9D83, 0x64, 0x9D85, 0x64, 0x9D87, 0x64, 0x9D89, 0x64, 0x9D8B, 0x50, 0x9D8D, 0x60,
	0x9D8F, 0x65, 0x9D91, 0x50, 0x9D93, 0x60, 0x9D95, 0x65, 0x9D97, 0x01, 0x9D99, 0x01,
	0x9D9B, 0x01, 0x9D9D, 0x01, 0x9D9F, 0x01, 0x9DA1, 0x01, 0x9E01, 0x35, 0x9E03, 0x14,
	0x9E05, 0x14, 0x9E07, 0x31, 0x9E09, 0x1B, 0x9E0B, 0x15, 0x9E0D, 0x1E, 0x9E0F, 0x1E,
	0x9E11, 0x1E, 0x9E13, 0x64, 0x9E15, 0x64, 0x9E17, 0x64, 0x9E19, 0x50, 0x9E1B, 0x60,
	0x9E1D, 0x65, 0x9E1F, 0x01, 0x9E21, 0x01, 0x9E23, 0x01, 0x9E25, 0x14, 0x9E27, 0x14,
	0x9E29, 0x14, 0x9E2B, 0x2F, 0x9E2D, 0x1A, 0x9E2F, 0x14, 0x9E31, 0x1E, 0x9E33, 0x1E,
	0x9E35, 0x1E, 0x9E37, 0x6B, 0x9E39, 0x7C, 0x9E3B, 0x81, 0x9E3D, 0x00, 0x9E3F, 0x00,
	0x9E41, 0x00, 0x9E4F, 0x42, 0x9E51, 0x0B, 0x9E53, 0x08, 0x9E55, 0x5A, 0x9E57, 0x0D,
	0x9E59, 0x08, 0x9E5B, 0x35, 0x9E5D, 0x14, 0x9E5F, 0x14, 0x9E61, 0x35, 0x9E63, 0x14,
	0x9E65, 0x14, 0x9E67, 0x31, 0x9E69, 0x1B, 0x9E6B, 0x15, 0x9E6D, 0x31, 0x9E6F, 0x1B,
	0x9E71, 0x15, 0x9E73, 0x1E, 0x9E75, 0x1E, 0x9E77, 0x1E, 0x9E79, 0x1E, 0x9E7B, 0x1E,
	0x9E7D, 0x1E, 0x9E7F, 0x64, 0x9E81, 0x64, 0x9E83, 0x64, 0x9E85, 0x64, 0x9E87, 0x64,
	0x9E89, 0x64, 0x9E8B, 0x50, 0x9E8D, 0x60, 0x9E8F, 0x65, 0x9E91, 0x50, 0x9E93, 0x60,
	0x9E95, 0x65, 0x9E97, 0x01, 0x9E99, 0x01, 0x9E9B, 0x01, 0x9E9D, 0x01, 0x9E9F, 0x01,
	0x9EA1, 0x01, 0x9F01, 0x14, 0x9F03, 0x14, 0x9F05, 0x14, 0x9F07, 0x14, 0x9F09, 0x14,
	0x9F0B, 0x14, 0x9F0D, 0x2F, 0x9F0F, 0x1A, 0x9F11, 0x14, 0x9F13, 0x2F, 0x9F15, 0x1A,
	0x9F17, 0x14, 0x9F19, 0x1E, 0x9F1B, 0x1E, 0x9F1D, 0x1E, 0x9F1F, 0x1E, 0x9F21, 0x1E,
	0x9F23, 0x1E, 0x9F25, 0x6B, 0x9F27, 0x7C, 0x9F29, 0x81, 0x9F2B, 0x6B, 0x9F2D, 0x7C,
	0x9F2F, 0x81, 0x9F31, 0x00, 0x9F33, 0x00, 0x9F35, 0x00, 0x9F37, 0x00, 0x9F39, 0x00,
	0x9F3B, 0x00, 0x9F3C, 0x00, 0x9F3D, 0x00, 0x9F3E, 0x00, 0x9F41, 0x00, 0x9F43, 0x10,
	0x9F45, 0x10, 0x9F47, 0xC8, 0x9F49, 0x32, 0x9F4B, 0x04, 0x9F4D, 0x00, 0x9F4F, 0x10,
	0x9F51, 0x10, 0x9F53, 0x00, 0x9F55, 0x10, 0x9F57, 0x10, 0x9F59, 0x20, 0x9F5B, 0x04,
	0x9F5D, 0x04, 0x9F5F, 0x20, 0x9F61, 0x04, 0x9F63, 0x04, 0x9F64, 0xE0, 0x9F65, 0xE0,
	0x9F66, 0xE0, 0x9F6A, 0x00, 0x9F6B, 0x14, 0x9F6C, 0x00, 0x9F6D, 0x14, 0x9F6E, 0x00,
	0x9F6F, 0x14, 0x9F77, 0x42, 0x9F78, 0x00, 0x9F79, 0x0F, 0x9F7B, 0x0B, 0x9F7D, 0x42,
	0x9F7E, 0x00, 0x9F7F, 0x0F, 0x9F81, 0x0B, 0x9F83, 0x5A, 0x9F85, 0x13, 0x9F87, 0x0C,
	0x9F89, 0x5A, 0x9F8B, 0x13, 0x9F8D, 0x0C, 0x9F8F, 0xA0, 0x9FA6, 0x3F, 0x9FA7, 0x3F,
	0x9FA8, 0x3F, 0x9FA9, 0x0A, 0x9FAA, 0x0A, 0x9FAB, 0x0A, 0x9FAC, 0x3F, 0x9FAD, 0x3F,
	0x9FAE, 0x3F, 0x9FAF, 0x00, 0x9FB0, 0x00, 0x9FB1, 0x00, 0xA001, 0x14, 0xA003, 0x14,
	0xA005, 0x14, 0xA007, 0x14, 0xA009, 0x14, 0xA00B, 0x14, 0xA00D, 0x2F, 0xA00F, 0x1A,
	0xA011, 0x14, 0xA013, 0x2F, 0xA015, 0x1A, 0xA017, 0x14, 0xA019, 0x1E, 0xA01B, 0x1E,
	0xA01D, 0x1E, 0xA01F, 0x1E, 0xA021, 0x1E, 0xA023, 0x1E, 0xA025, 0x6B, 0xA027, 0x7C,
	0xA029, 0x81, 0xA02B, 0x6B, 0xA02D, 0x7C, 0xA02F, 0x81, 0xA031, 0x00, 0xA033, 0x00,
	0xA035, 0x00, 0xA037, 0x00, 0xA039, 0x00, 0xA03B, 0x00, 0xA03C, 0x00, 0xA03D, 0x00,
	0xA03E, 0x00, 0xA041, 0x00, 0xA043, 0x10, 0xA045, 0x10, 0xA047, 0xC8, 0xA049, 0x32,
	0xA04B, 0x04, 0xA04D, 0x00, 0xA04F, 0x10, 0xA051, 0x10, 0xA053, 0x00, 0xA055, 0x10,
	0xA057, 0x10, 0xA059, 0x20, 0xA05B, 0x04, 0xA05D, 0x04, 0xA05F, 0x20, 0xA061, 0x04,
	0xA063, 0x04, 0xA064, 0xE0, 0xA065, 0xE0, 0xA066, 0xE0, 0xA067, 0x20, 0xA068, 0x20,
	0xA069, 0x20, 0xA06B, 0x14, 0xA06D, 0x14, 0xA06F, 0x14, 0xA071, 0x48, 0xA073, 0x48,
	0xA075, 0x48, 0xA077, 0x42, 0xA079, 0x0B, 0xA07B, 0x08, 0xA07D, 0x42, 0xA07F, 0x0B,
	0xA081, 0x08, 0xA083, 0x5A, 0xA085, 0x0D, 0xA087, 0x08, 0xA089, 0x5A, 0xA08B, 0x0D,
	0xA08D, 0x08, 0xA08F, 0xA0, 0xA091, 0x3A, 0xA093, 0x3A, 0xA095, 0x0A, 0xA097, 0x0A,
	0xA099, 0x0A, 0xA0A9, 0x00, 0xA0AA, 0x00, 0xA0AB, 0x00, 0xA0AF, 0x00, 0xA0B0, 0x00,
	0xA0B1, 0x00,
	/* Additional Code Settings */
	0xF800, 0x5C, 0xF801, 0x5C, 0xF802, 0x92, 0xF803, 0x00, 0xF804, 0x55, 0xF805, 0xBC,
	0xF806, 0x22, 0xF807, 0x00, 0xF808, 0x1C, 0xF809, 0x80, 0xF80A, 0xFA, 0xF80B, 0x21,
	0xF80C, 0x55, 0xF80D, 0x14, 0xF80E, 0xBA, 0xF80F, 0x00, 0xF810, 0x81, 0xF811, 0xD1,
	0xF812, 0x31, 0xF813, 0x02,
	/* Load Setting */
	0x5869, 0x01
};


/* 750M mipi rate */
kal_uint16 addr_data_pair_preview_imx300[] = {
	0x0301, 0x04, 0x0303, 0x02, 0x0305, 0x03, 0x0306, 0x00, 0x0307, 0x82, 0x0309, 0x0A, 0x030B,
	0x01, 0x030D, 0x03, 0x030E, 0x00, 0x030F, 0x5D, 0x0112, 0x0A, 0x0113, 0x0A, 0x0114,
	0x03, 0x0221, 0x11, 0x0381, 0x01, 0x0383, 0x01, 0x0385, 0x01, 0x0387, 0x01, 0x0401,
	0x00, 0x0404, 0x01, 0x0405, 0x00, 0x0900, 0x01, 0x0901, 0x22, 0x0902, 0x02, 0x31E8,
	0x01, 0x31E9, 0x01, 0x31EC, 0x00, 0x31F0, 0x01, 0x31F1, 0xF4, 0x3221, 0x01, 0x6DC2,
	0x04, 0x6DC3, 0x01, 0x6DC4, 0x44, 0x6DC7, 0x04, 0x6DCA, 0x00, 0x6DCB, 0x00, 0x6DCC,
	0x01, 0x7EA0, 0x01, 0x7EA3, 0x05, 0x7EA5, 0x1E, 0x7EA6, 0x60, 0x7EA8, 0x00, 0x7EA9,
	0x00, 0x7EAC, 0x01, 0x7EB3, 0x04, 0x7EB4, 0x0C, 0x7EB5, 0x10, 0x0340, 0x09, 0x0341,
	0x20, 0x0342, 0x1C, 0x0343, 0xF8, 0x0344, 0x00, 0x0345, 0xE8, 0x0346, 0x00, 0x0347,
	0x00, 0x0348, 0x16, 0x0349, 0x77, 0x034A, 0x10, 0x034B, 0x3F, 0x034C, 0x0A, 0x034D,
	0xC8, 0x034E, 0x08, 0x034F, 0x20, 0x0408, 0x00, 0x0409, 0x00, 0x040A, 0x00, 0x040B,
	0x00, 0x040C, 0x0A, 0x040D, 0xC8, 0x040E, 0x08, 0x040F, 0x20, 0x30E4, 0x15, 0x30E5,
	0x90, 0x30E6, 0x01, 0x30E7, 0x00, 0x30E8, 0x15, 0x30E9, 0x90, 0x30EA, 0x05, 0x30EB,
	0x00, 0x30EC, 0x15, 0x30ED, 0x90, 0x30EE, 0x01, 0x30EF, 0x00, 0x30F4, 0x15, 0x30F5,
	0x90, 0x30F6, 0x01, 0x30F7, 0x00, 0x3294, 0x00, 0x3295, 0xe8, 0x3296, 0x16, 0x3297,
	0x77, 0x0202, 0x09, 0x0203, 0x0C, 0x0204, 0x00, 0x0205, 0x00, 0x020E, 0x01, 0x020F,
	0x00, 0x0210, 0x01, 0x0211, 0x00, 0x0212, 0x01, 0x0213, 0x00, 0x0214, 0x01, 0x0215,
	0x00, 0x0216, 0x00, 0x0217, 0x00, 0x3220, 0x00, 0x3006, 0x01, 0x3007, 0x02, 0x31E0,
	0x03, 0x31E1, 0xFF, 0x31E4, 0x02, 0x3A00, 0x19, 0x3A01, 0x0A, 0x3A02, 0x0C, 0x3A03,
	0x14, 0x3A04, 0x00, 0x3A05, 0x00, 0x3A06, 0x00, 0x3A07, 0x01, 0x3A08, 0x00, 0x4301,
	0x94, 0x4302, 0x15, 0x4303, 0x44, 0x4304, 0x09, 0x4305, 0x07, 0x4306, 0x87, 0x4307,
	0x88, 0x4308, 0xBA, 0x4309, 0x21, 0x4F7E, 0x12, 0x0220, 0x00, 0x0222, 0x01, 0x0224,
	0x01, 0x0225, 0xF4, 0x3000, 0x54, 0x3001, 0x01, 0x0600, 0x00, 0x0601, 0x00, 0x3022,
	0x01, 0x0b05, 0x01, 0x0b06, 0x01, 0x3018, 0x01, 0x3019, 0x00, 0x301A, 0x01, 0x3025,
	0x01, 0x3130, 0x01, 0x3004, 0x03, 0x30A2, 0x00, 0x0B00, 0x00, 0x3250, 0x00, 0x3251,
	0x00, 0x3011, 0x00, 0x3013, 0x01, 0x3129, 0x00, 0x3125, 0x00, 0x3127, 0x01, 0x3140,
	0x00, 0x3141, 0x01, 0x3142, 0x00, 0x314F, 0x00, 0x0B8E, 0x01, 0x0B8F, 0x00, 0x0B90,
	0x01, 0x0B91, 0x00, 0x0B92, 0x01, 0x0B93, 0x00, 0x0B94, 0x01, 0x0B95, 0x00
};

kal_uint16 addr_data_pair_preview_imx300_pdaf[] = {

	/* pd */
	/* 1: PD Data is output */
	0x3121, 0x01,
	/* 1: PD Data is output */
	0x3123, 0x01,
	/*
	 * Phase Detection area setting register (fixed area mode)
	 * 0X3150~0X3153:PD_AREA_X&Y_OFFSET
	 */
	0x3150, 0x00, 0x3151, 0x00, 0x3152, 0x00, 0x3153, 0x20,
	/*
	 * Phase Detection area setting register (fixed area mode)
	 * 0X3154~0X3157:PD_AREA_WIDTH&HEIGHT
	 */
	/* PD_AREA_WIDTH[12:8] */
	0x3154, 0x01,
	/* PD_AREA_WIDTH[7:0] */
	0x3155, 0x1A,
	/* PD_AREA_HEIGHT[12:8] */
	0x3156, 0x01,
	/* PD_AREA_HEIGHT[7:0] */
	0x3157, 0x66,
#if  0
	/* Area setting register (flexible area mode)0X3158~0X3197 */
	0x3158, 0x00, 0x3159, 0x00, 0x315A, 0x00, 0x315B, 0x00, 0x315C, 0x00, 0x315D, 0x00,
	0x315E, 0x00, 0x315F, 0x00, 0x3160, 0x00, 0x3161, 0x00, 0x3162, 0x00, 0x3163, 0x00,
	0x3164, 0x00, 0x3165, 0x00, 0x3166, 0x00, 0x3167, 0x00, 0x3168, 0x00, 0x3169, 0x00,
	0x316A, 0x00, 0x316B, 0x00, 0x316C, 0x00, 0x316D, 0x00, 0x316E, 0x00, 0x316F, 0x00,
	0x3170, 0x00, 0x3171, 0x00, 0x3172, 0x00, 0x3173, 0x00, 0x3174, 0x00, 0x3175, 0x00,
	0x3176, 0x00, 0x3177, 0x00, 0x3178, 0x00, 0x3179, 0x00, 0x317A, 0x00, 0x317B, 0x00,
	0x317C, 0x00, 0x317D, 0x00, 0x317E, 0x00, 0x317F, 0x00, 0x3180, 0x00, 0x3181, 0x00,
	0x3182, 0x00, 0x3183, 0x00, 0x3184, 0x00, 0x3185, 0x00, 0x3186, 0x00, 0x3187, 0x00,
	0x3188, 0x00, 0x3189, 0x00, 0x318A, 0x00, 0x318B, 0x00, 0x318C, 0x00, 0x318D, 0x00,
	0x318E, 0x00, 0x318F, 0x00, 0x3190, 0x00, 0x3191, 0x00, 0x3192, 0x00, 0x3193, 0x00,
	0x3194, 0x00, 0x3195, 0x00, 0x3196, 0x00, 0x3197, 0x00,
	/*Flexible area Enable setting register 0X31B4~0X31BB */
	0x31B4, 0x00, 0x31B5, 0x00, 0x31B6, 0x00, 0x31B7, 0x00, 0x31B8, 0x00, 0x31B9, 0x00,
	0x31BA, 0x00, 0x31BB, 0x00,
#endif
	/* Window Reflection Timing,PDAF window 1 Frame later reflecting enable */
	0x3291, 0x01
};


kal_uint16 addr_data_pair_capture_imx300[] = {

	0x0301, 0x04, 0x0303, 0x02, 0x0305, 0x03, 0x0306, 0x00, 0x0307, 0xBE, 0x0309, 0x0A, 0x030B,
	0x01, 0x030D, 0x03, 0x030E, 0x00, 0x030F, 0xB6, 0x0112, 0x0A, 0x0113, 0x0A, 0x0114,
	0x03, 0x0221, 0x11, 0x0381, 0x01, 0x0383, 0x01, 0x0385, 0x01, 0x0387, 0x01, 0x0401,
	0x00, 0x0404, 0x01, 0x0405, 0x00, 0x0900, 0x00, 0x0901, 0x11, 0x0902, 0x00, 0x31E8,
	0x01, 0x31E9, 0x00, 0x31EC, 0x00, 0x31F0, 0x02, 0x31F1, 0xBC, 0x3221, 0x01, 0x6DC2,
	0x04, 0x6DC3, 0x01, 0x6DC4, 0x60, 0x6DC7, 0x04, 0x6DCA, 0x00, 0x6DCB, 0x00, 0x6DCC,
	0x01, 0x7EA0, 0x00, 0x7EA3, 0x08, 0x7EA5, 0x0F, 0x7EA6, 0x60, 0x7EA8, 0x00, 0x7EA9,
	0x78, 0x7EAC, 0x00, 0x7EB3, 0x00, 0x7EB4, 0x00, 0x7EB5, 0x00, 0x0340, 0x10, 0x0341,
	0xA6, 0x0342, 0x1D, 0x0343, 0xC0, 0x0344, 0x00, 0x0345, 0xE8, 0x0346, 0x00, 0x0347,
	0x00, 0x0348, 0x16, 0x0349, 0x77, 0x034A, 0x10, 0x034B, 0x3F, 0x034C, 0x15, 0x034D,
	0x90, 0x034E, 0x10, 0x034F, 0x40, 0x0408, 0x00, 0x0409, 0x00, 0x040A, 0x00, 0x040B,
	0x00, 0x040C, 0x15, 0x040D, 0x90, 0x040E, 0x10, 0x040F, 0x40, 0x30E4, 0x15, 0x30E5,
	0x90, 0x30E6, 0x01, 0x30E7, 0x00, 0x30E8, 0x15, 0x30E9, 0x90, 0x30EA, 0x05, 0x30EB,
	0x00, 0x30EC, 0x15, 0x30ED, 0x90, 0x30EE, 0x01, 0x30EF, 0x00, 0x30F4, 0x15, 0x30F5,
	0x90, 0x30F6, 0x01, 0x30F7, 0x00, 0x3294, 0x00, 0x3295, 0xe8, 0x3296, 0x16, 0x3297,
	0x77, 0x0202, 0x10, 0x0203, 0x92, 0x0204, 0x00, 0x0205, 0x00, 0x020E, 0x01, 0x020F,
	0x00, 0x0210, 0x01, 0x0211, 0x00, 0x0212, 0x01, 0x0213, 0x00, 0x0214, 0x01, 0x0215,
	0x00, 0x0216, 0x00, 0x0217, 0x00, 0x3220, 0x00, 0x3006, 0x01, 0x3007, 0x02, 0x31E0,
	0x03, 0x31E1, 0xFF, 0x31E4, 0x02, 0x3A00, 0x19, 0x3A01, 0x00, 0x3A02, 0x00, 0x3A03,
	0x08, 0x3A04, 0x00, 0x3A05, 0x00, 0x3A06, 0x00, 0x3A07, 0x00, 0x3A08, 0x00, 0x4301,
	0x94, 0x4302, 0x15, 0x4303, 0x44, 0x4304, 0x09, 0x4305, 0x07, 0x4306, 0x87, 0x4307,
	0x88, 0x4308, 0xBA, 0x4309, 0x21, 0x4F7E, 0x12,
	/* [0] 0 HDR disable */
	0x0220, 0x00, 0x0222, 0x01, 0x0224, 0x01, 0x0225, 0xF4, 0x3000, 0x54,
	/* 1 pd enable(during HDR) */
	0x3001, 0x00, 0x0600, 0x00, 0x0601, 0x00, 0x3022, 0x01, 0x0b05, 0x01, 0x0b06, 0x01,
	0x3018, 0x01, 0x3019, 0x00, 0x301A, 0x01, 0x3025, 0x01, 0x3130, 0x01, 0x3004, 0x03,
	0x30A2, 0x01, 0x0B00, 0x00, 0x3250, 0x00, 0x3251, 0x00, 0x3011, 0x00, 0x3013, 0x01,
	0x3129, 0x00, 0x3125, 0x00, 0x3127, 0x01, 0x3140, 0x00, 0x3141, 0x01, 0x3142, 0x00,
	0x314F, 0x00,
	/* Color Temperature */
	0x0B8E, 0x01, 0x0B8F, 0x00, 0x0B90, 0x01, 0x0B91, 0x00, 0x0B92, 0x01, 0x0B93, 0x00,
	0x0B94, 0x01, 0x0B95, 0x00
};

kal_uint16 addr_data_pair_capture_imx300_pdaf[] = {
	/* pd */
	0x3121, 0x01,		/* 1: PD Data is output */
	0x3123, 0x01,	/* 1: PD Data is output */
	/*
	 * Phase Detection area setting register (fixed area mode)
	 * 0X3150~0X3153:PD_AREA_X&Y_OFFSET
	 */
	0x3150, 0x00, 0x3151, 0x00, 0x3152, 0x00, 0x3153, 0x20,
	/*
	 * Phase Detection area setting register (fixed area mode)
	 * 0X3154~0X3157:PD_AREA_WIDTH&HEIGHT
	 */
	/* PD_AREA_WIDTH[12:8] */
	0x3154, 0x01,
	/* PD_AREA_WIDTH[7:0] */
	0x3155, 0x59,
	/* PD_AREA_HEIGHT[12:8] */
	0x3156, 0x01,
	/* PD_AREA_HEIGHT[7:0] */
	0x3157, 0x55,
#if  0
	/* Area setting register (flexible area mode)0X3158~0X3197 */
	0x3158, 0x00, 0x3159, 0x00, 0x315A, 0x00, 0x315B, 0x00, 0x315C, 0x00, 0x315D, 0x00,
	0x315E, 0x00, 0x315F, 0x00, 0x3160, 0x00, 0x3161, 0x00, 0x3162, 0x00, 0x3163, 0x00,
	0x3164, 0x00, 0x3165, 0x00, 0x3166, 0x00, 0x3167, 0x00, 0x3168, 0x00, 0x3169, 0x00,
	0x316A, 0x00, 0x316B, 0x00, 0x316C, 0x00, 0x316D, 0x00, 0x316E, 0x00, 0x316F, 0x00,
	0x3170, 0x00, 0x3171, 0x00, 0x3172, 0x00, 0x3173, 0x00, 0x3174, 0x00, 0x3175, 0x00,
	0x3176, 0x00, 0x3177, 0x00, 0x3178, 0x00, 0x3179, 0x00, 0x317A, 0x00, 0x317B, 0x00,
	0x317C, 0x00, 0x317D, 0x00, 0x317E, 0x00, 0x317F, 0x00, 0x3180, 0x00, 0x3181, 0x00,
	0x3182, 0x00, 0x3183, 0x00, 0x3184, 0x00, 0x3185, 0x00, 0x3186, 0x00, 0x3187, 0x00,
	0x3188, 0x00, 0x3189, 0x00, 0x318A, 0x00, 0x318B, 0x00, 0x318C, 0x00, 0x318D, 0x00,
	0x318E, 0x00, 0x318F, 0x00, 0x3190, 0x00, 0x3191, 0x00, 0x3192, 0x00, 0x3193, 0x00,
	0x3194, 0x00, 0x3195, 0x00, 0x3196, 0x00, 0x3197, 0x00,
	/*Flexible area Enable setting register 0X31B4~0X31BB */
	0x31B4, 0x00, 0x31B5, 0x00, 0x31B6, 0x00, 0x31B7, 0x00, 0x31B8, 0x00, 0x31B9, 0x00,
	0x31BA, 0x00, 0x31BB, 0x00,
#endif
	/* Window Reflection Timing,PDAF window 1 Frame later reflecting enable */
	0x3291, 0x01
};


kal_uint16 addr_data_pair_video_imx300[] = {
	0x0100, 0x00, 0x0301, 0x04, 0x0303, 0x02, 0x0305, 0x03, 0x0306, 0x00, 0x0307, 0x82, 0x0309,
	0x0A, 0x030B, 0x01, 0x030D, 0x03, 0x030E, 0x00, 0x030F, 0x5D, 0x0112, 0x0A, 0x0113,
	0x0A, 0x0114, 0x03, 0x0221, 0x22, 0x0381, 0x01, 0x0383, 0x01, 0x0385, 0x01, 0x0387,
	0x01, 0x0401, 0x00, 0x0404, 0x01, 0x0405, 0x00, 0x0900, 0x00, 0x0901, 0x11, 0x0902,
	0x02, 0x31E8, 0x01, 0x31E9, 0x00, 0x31EC, 0x00, 0x31F0, 0x02, 0x31F1, 0x58, 0x3221,
	0x01, 0x6DC2, 0x04, 0x6DC3, 0x01, 0x6DC4, 0x60, 0x6DC7, 0x04, 0x6DCA, 0x00, 0x6DCB,
	0x00, 0x6DCC, 0x01, 0x7EA0, 0x00, 0x7EA3, 0x08, 0x7EA5, 0x0F, 0x7EA6, 0x60, 0x7EA8,
	0x00, 0x7EA9, 0x78, 0x7EAC, 0x00, 0x7EB3, 0x00, 0x7EB4, 0x00, 0x7EB5, 0x00, 0x0340,
	0x09, 0x0341, 0x20, 0x0342, 0x1C, 0x0343, 0xF8, 0x0344, 0x00, 0x0345, 0xE8, 0x0346,
	0x00, 0x0347, 0x00, 0x0348, 0x16, 0x0349, 0x77, 0x034A, 0x10, 0x034B, 0x3F, 0x034C,
	0x0A, 0x034D, 0xC8, 0x034E, 0x08, 0x034F, 0x20, 0x0408, 0x00, 0x0409, 0x00, 0x040A,
	0x00, 0x040B, 0x00, 0x040C, 0x0A, 0x040D, 0xC8, 0x040E, 0x08, 0x040F, 0x20, 0x30E4,
	0x15, 0x30E5, 0x90, 0x30E6, 0x01, 0x30E7, 0x00, 0x30E8, 0x15, 0x30E9, 0x90, 0x30EA,
	0x05, 0x30EB, 0x00, 0x30EC, 0x15, 0x30ED, 0x90, 0x30EE, 0x01, 0x30EF, 0x00, 0x30F4,
	0x15, 0x30F5, 0x90, 0x30F6, 0x01, 0x30F7, 0x00, 0x3294, 0x00, 0x3295, 0xe8, 0x3296,
	0x16, 0x3297, 0x77, 0x0202, 0x09, 0x0203, 0x0C, 0x0204, 0x00, 0x0205, 0x00, 0x020E,
	0x01, 0x020F, 0x00, 0x0210, 0x01, 0x0211, 0x00, 0x0212, 0x01, 0x0213, 0x00, 0x0214,
	0x01, 0x0215, 0x00, 0x0216, 0x00, 0x0217, 0x00, 0x3220, 0x00, 0x3006, 0x01, 0x3007,
	0x01, 0x31E0, 0x3F, 0x31E1, 0xFF, 0x31E4, 0x00, 0x3A00, 0x19, 0x3A01, 0x00, 0x3A02,
	0x00, 0x3A03, 0x08, 0x3A04, 0x00, 0x3A05, 0x00, 0x3A06, 0x00, 0x3A07, 0x00, 0x3A08,
	0x00, 0x4301, 0x94, 0x4302, 0x15, 0x4303, 0x44, 0x4304, 0x09, 0x4305, 0x07, 0x4306,
	0x87, 0x4307, 0x88, 0x4308, 0xBA, 0x4309, 0x21, 0x4F7E, 0x12,
	/* [0] 0 HDR disable */
	0x0220, 0x03, 0x0222, 0x01, 0x0224, 0x09, 0x0225, 0x0C, 0x3000, 0x54,
	/* 1 pd enable(during HDR) */
	0x3001, 0x01, 0x0600, 0x00, 0x0601, 0x00, 0x3022, 0x01, 0x0b05, 0x01, 0x0b06, 0x01,
	0x3018, 0x01, 0x3019, 0x00, 0x301A, 0x01, 0x3025, 0x01, 0x3130, 0x01, 0x3004, 0x03,
	0x30A2, 0x01, 0x0B00, 0x00, 0x3250, 0x00, 0x3251, 0x00, 0x3011, 0x00, 0x3013, 0x01,
	0x3129, 0x00, 0x3125, 0x00, 0x3127, 0x01, 0x3140, 0x00, 0x3141, 0x01, 0x3142, 0x00,
	0x314F, 0x00,
	/* pd */
#if 0
	/* PDAF_FIEXED_AREA_MODE */
	/* 1: PD Data is output */
	0x3121, 0x01,
	/* 1: PD Data is output */
	0x3123, 0x01,
	/*
	 * Phase Detection area setting register (fixed area mode)
	 * 0X3150~0X3153:PD_AREA_X&Y_OFFSET
	 */
	0x3150, 0x00, 0x3151, 0x00, 0x3152, 0x00, 0x3153, 0x00,
#endif
#if 0
	/* Area setting register (flexible area mode)0X3158~0X3197 */
	0x3158, 0x00, 0x3159, 0x00, 0x315A, 0x00, 0x315B, 0x00, 0x315C, 0x00, 0x315D, 0x00,
	0x315E, 0x00, 0x315F, 0x00, 0x3160, 0x00, 0x3161, 0x00, 0x3162, 0x00, 0x3163, 0x00,
	0x3164, 0x00, 0x3165, 0x00, 0x3166, 0x00, 0x3167, 0x00, 0x3168, 0x00, 0x3169, 0x00,
	0x316A, 0x00, 0x316B, 0x00, 0x316C, 0x00, 0x316D, 0x00, 0x316E, 0x00, 0x316F, 0x00,
	0x3170, 0x00, 0x3171, 0x00, 0x3172, 0x00, 0x3173, 0x00, 0x3174, 0x00, 0x3175, 0x00,
	0x3176, 0x00, 0x3177, 0x00, 0x3178, 0x00, 0x3179, 0x00, 0x317A, 0x00, 0x317B, 0x00,
	0x317C, 0x00, 0x317D, 0x00, 0x317E, 0x00, 0x317F, 0x00, 0x3180, 0x00, 0x3181, 0x00,
	0x3182, 0x00, 0x3183, 0x00, 0x3184, 0x00, 0x3185, 0x00, 0x3186, 0x00, 0x3187, 0x00,
	0x3188, 0x00, 0x3189, 0x00, 0x318A, 0x00, 0x318B, 0x00, 0x318C, 0x00, 0x318D, 0x00,
	0x318E, 0x00, 0x318F, 0x00, 0x3190, 0x00, 0x3191, 0x00, 0x3192, 0x00, 0x3193, 0x00,
	0x3194, 0x00, 0x3195, 0x00, 0x3196, 0x00, 0x3197, 0x00, 0x31B4, 0x00, 0x31B5, 0x00,
	0x31B6, 0x00, 0x31B7, 0x00, 0x31B8, 0x00, 0x31B9, 0x00, 0x31BA, 0x00, 0x31BB, 0x00,
#endif
	0x3291, 0x01, 0x0B8E, 0x01, 0x0B8F, 0x00, 0x0B90, 0x01, 0x0B91, 0x00, 0x0B92, 0x01,
	0x0B93, 0x00, 0x0B94, 0x01, 0x0B95, 0x00, 0x0100, 0x01
};


kal_uint16 addr_data_pair_hs_video_imx300[] = {
	/*720 120fps*/
	/*****************
	 * reg_DN1
	 * 1/2Binning_16:9
	 * H: 2992
	 * V: 1696
	 * 4Lane  60fps
	 ******************/

	0x0100, 0x00, 0x0301, 0x04, 0x0303, 0x02, 0x0305, 0x03, 0x0306, 0x00, 0x0307, 0xBE, 0x0309,
	0x0A, 0x030B, 0x01, 0x030D, 0x03, 0x030E, 0x00, 0x030F, 0x5D, 0x0112, 0x0A, 0x0113,
	0x0A, 0x0114, 0x03, 0x0221, 0x11, 0x0381, 0x01, 0x0383, 0x01, 0x0385, 0x01, 0x0387,
	0x01, 0x0401, 0x00, 0x0404, 0x01, 0x0405, 0x00, 0x0900, 0x01, 0x0901, 0x22, 0x0902,
	0x02, 0x31E8, 0x01, 0x31E9, 0x01, 0x31EC, 0x00, 0x31F0, 0x03, 0x31F1, 0x20, 0x3221,
	0x00, 0x6DC2, 0x04, 0x6DC3, 0x01, 0x6DC4, 0x44, 0x6DC7, 0x04, 0x6DCA, 0x00, 0x6DCB,
	0x00, 0x6DCC, 0x01, 0x7EA0, 0x01, 0x7EA3, 0x05, 0x7EA5, 0x1E, 0x7EA6, 0x60, 0x7EA8,
	0x00, 0x7EA9, 0x00, 0x7EAC, 0x01, 0x7EB3, 0x04, 0x7EB4, 0x0C, 0x7EB5, 0x10, 0x0340,
	0x06, 0x0341, 0xAA, 0x0342, 0x1C, 0x0343, 0xF8, 0x0344, 0x00, 0x0345, 0x00, 0x0346,
	0x01, 0x0347, 0xD0, 0x0348, 0x17, 0x0349, 0x5F, 0x034A, 0x0E, 0x034B, 0x6F, 0x034C,
	0x08, 0x034D, 0x68, 0x034E, 0x06, 0x034F, 0x4E, 0x0408, 0x01, 0x0409, 0xA4, 0x040A,
	0x00, 0x040B, 0x02, 0x040C, 0x08, 0x040D, 0x68, 0x040E, 0x06, 0x040F, 0x4E, 0x30E4,
	0x15, 0x30E5, 0x90, 0x30E6, 0x01, 0x30E7, 0x00, 0x30E8, 0x15, 0x30E9, 0x90, 0x30EA,
	0x05, 0x30EB, 0x00, 0x30EC, 0x15, 0x30ED, 0x90, 0x30EE, 0x01, 0x30EF, 0x00, 0x30F4,
	0x15, 0x30F5, 0x90, 0x30F6, 0x01, 0x30F7, 0x00, 0x3294, 0x00, 0x3295, 0xe8, 0x3296,
	0x16, 0x3297, 0x77, 0x0202, 0x06, 0x0203, 0x96, 0x0204, 0x00, 0x0205, 0x00, 0x020E,
	0x01, 0x020F, 0x00, 0x0210, 0x01, 0x0211, 0x00, 0x0212, 0x01, 0x0213, 0x00, 0x0214,
	0x01, 0x0215, 0x00, 0x0216, 0x00, 0x0217, 0x00, 0x3220, 0x00, 0x3006, 0x01, 0x3007,
	0x02, 0x31E0, 0x03, 0x31E1, 0xFF, 0x31E4, 0x02, 0x3A00, 0x19, 0x3A01, 0x0A, 0x3A02,
	0x0C, 0x3A03, 0x14, 0x3A04, 0x00, 0x3A05, 0x00, 0x3A06, 0x00, 0x3A07, 0x01, 0x3A08,
	0x00, 0x4301, 0x94, 0x4302, 0x15, 0x4303, 0x44, 0x4304, 0x09, 0x4305, 0x07, 0x4306,
	0x87, 0x4307, 0x88, 0x4308, 0xBA, 0x4309, 0x21, 0x4F7E, 0x12,
	/* [0] 0 HDR disable */
	0x0220, 0x00, 0x0222, 0x01, 0x0224, 0x01, 0x0225, 0xF4, 0x3000, 0x54,
	/* 1 pd enable(during HDR) */
	0x3001, 0x01, 0x0600, 0x00, 0x0601, 0x00, 0x3022, 0x01, 0x0b05, 0x01, 0x0b06, 0x01,
	0x3018, 0x01, 0x3019, 0x00, 0x301A, 0x01, 0x3025, 0x01, 0x3130, 0x01, 0x3004, 0x03,
	0x30A2, 0x00, 0x0B00, 0x00, 0x3250, 0x00, 0x3251, 0x00, 0x3011, 0x00, 0x3013, 0x01,
	0x3129, 0x00, 0x3125, 0x00, 0x3127, 0x01, 0x3140, 0x00, 0x3141, 0x01, 0x3142, 0x00,
	0x314F, 0x00,
#if 0
	/* pd */
	/* 1: PD Data is output */
	0x3121, 0x01,
	/* 1: PD Data is output */
	0x3123, 0x01, 0x3150, 0x00, 0x3151, 0x00, 0x3152, 0x00, 0x3153, 0x00, 0x3158, 0x00,
	0x3159, 0x00, 0x315A, 0x00, 0x315B, 0x00, 0x315C, 0x00, 0x315D, 0x00, 0x315E, 0x00,
	0x315F, 0x00, 0x3160, 0x00, 0x3161, 0x00, 0x3162, 0x00, 0x3163, 0x00, 0x3164, 0x00,
	0x3165, 0x00, 0x3166, 0x00, 0x3167, 0x00, 0x3168, 0x00, 0x3169, 0x00, 0x316A, 0x00,
	0x316B, 0x00, 0x316C, 0x00, 0x316D, 0x00, 0x316E, 0x00, 0x316F, 0x00, 0x3170, 0x00,
	0x3171, 0x00, 0x3172, 0x00, 0x3173, 0x00, 0x3174, 0x00, 0x3175, 0x00, 0x3176, 0x00,
	0x3177, 0x00, 0x3178, 0x00, 0x3179, 0x00, 0x317A, 0x00, 0x317B, 0x00, 0x317C, 0x00,
	0x317D, 0x00, 0x317E, 0x00, 0x317F, 0x00, 0x3180, 0x00, 0x3181, 0x00, 0x3182, 0x00,
	0x3183, 0x00, 0x3184, 0x00, 0x3185, 0x00, 0x3186, 0x00, 0x3187, 0x00, 0x3188, 0x00,
	0x3189, 0x00, 0x318A, 0x00, 0x318B, 0x00, 0x318C, 0x00, 0x318D, 0x00, 0x318E, 0x00,
	0x318F, 0x00, 0x3190, 0x00, 0x3191, 0x00, 0x3192, 0x00, 0x3193, 0x00, 0x3194, 0x00,
	0x3195, 0x00, 0x3196, 0x00, 0x3197, 0x00, 0x31B4, 0x00, 0x31B5, 0x00, 0x31B6, 0x00,
	0x31B7, 0x00, 0x31B8, 0x00, 0x31B9, 0x00, 0x31BA, 0x00, 0x31BB, 0x00, 0x3291, 0x01,
#endif
	0x0B8E, 0x01, 0x0B8F, 0x00, 0x0B90, 0x01, 0x0B91, 0x00, 0x0B92, 0x01, 0x0B93, 0x00,
	0x0B94, 0x01, 0x0B95, 0x00, 0x0100, 0x01
};


kal_uint16 addr_data_pair_slim_video_imx300[] = {
	0x0100, 0x00, 0x0301, 0x04, 0x0303, 0x02, 0x0305, 0x03, 0x0306, 0x00, 0x0307, 0xBE, 0x0309,
	0x0A, 0x030B, 0x01, 0x030D, 0x03, 0x030E, 0x00, 0x030F, 0xB6, 0x0112, 0x0A, 0x0113,
	0x0A, 0x0114, 0x03, 0x0221, 0x11, 0x0381, 0x01, 0x0383, 0x01, 0x0385, 0x01, 0x0387,
	0x01, 0x0401, 0x00, 0x0404, 0x01, 0x0405, 0x00, 0x0900, 0x01, 0x0901, 0x22, 0x0902,
	0x02, 0x31E8, 0x01, 0x31E9, 0x00, 0x31EC, 0x00, 0x31F0, 0x01, 0x31F1, 0x90, 0x3221,
	0x00, 0x6DC2, 0x04, 0x6DC3, 0x01, 0x6DC4, 0x60, 0x6DC7, 0x04, 0x6DCA, 0x00, 0x6DCB,
	0x00, 0x6DCC, 0x01, 0x7EA0, 0x00, 0x7EA3, 0x08, 0x7EA5, 0x0F, 0x7EA6, 0x60, 0x7EA8,
	0x00, 0x7EA9, 0x78, 0x7EAC, 0x00, 0x7EB3, 0x00, 0x7EB4, 0x00, 0x7EB5, 0x00, 0x0340,
	0x0D, 0x0341, 0xF2, 0x0342, 0x1B, 0x0343, 0xB8, 0x0344, 0x00, 0x0345, 0x00, 0x0346,
	0x01, 0x0347, 0x80, 0x0348, 0x17, 0x0349, 0x5F, 0x034A, 0x0E, 0x034B, 0xBF, 0x034C,
	0x0B, 0x034D, 0xB0, 0x034E, 0x06, 0x034F, 0xA0, 0x0408, 0x00, 0x0409, 0x00, 0x040A,
	0x00, 0x040B, 0x00, 0x040C, 0x0B, 0x040D, 0xB0, 0x040E, 0x06, 0x040F, 0xA0, 0x30E4,
	0x15, 0x30E5, 0x90, 0x30E6, 0x01, 0x30E7, 0x00, 0x30E8, 0x15, 0x30E9, 0x90, 0x30EA,
	0x05, 0x30EB, 0x00, 0x30EC, 0x15, 0x30ED, 0x90, 0x30EE, 0x01, 0x30EF, 0x00, 0x30F4,
	0x15, 0x30F5, 0x90, 0x30F6, 0x01, 0x30F7, 0x00, 0x3294, 0x00, 0x3295, 0xe8, 0x3296,
	0x16, 0x3297, 0x77, 0x0202, 0x06, 0x0203, 0xE8, 0x0204, 0x00, 0x0205, 0x00, 0x020E,
	0x01, 0x020F, 0x00, 0x0210, 0x01, 0x0211, 0x00, 0x0212, 0x01, 0x0213, 0x00, 0x0214,
	0x01, 0x0215, 0x00, 0x0216, 0x00, 0x0217, 0x00, 0x3220, 0x00, 0x3006, 0x01, 0x3007,
	0x02, 0x31E0, 0x03, 0x31E1, 0xFF, 0x31E4, 0x02, 0x3A00, 0x19, 0x3A01, 0x0A, 0x3A02,
	0x0C, 0x3A03, 0x14, 0x3A04, 0x00, 0x3A05, 0x00, 0x3A06, 0x00, 0x3A07, 0x01, 0x3A08,
	0x00, 0x4301, 0x94, 0x4302, 0x15, 0x4303, 0x44, 0x4304, 0x09, 0x4305, 0x07, 0x4306,
	0x87, 0x4307, 0x88, 0x4308, 0xBA, 0x4309, 0x21, 0x4F7E, 0x12,
	/* [0] 0 HDR disable */
	0x0220, 0x00, 0x0222, 0x01, 0x0224, 0x01, 0x0225, 0xF4, 0x3000, 0x54,
	/* 1 pd enable(during HDR) */
	0x3001, 0x00, 0x0600, 0x00, 0x0601, 0x00, 0x3022, 0x01, 0x0b05, 0x01, 0x0b06, 0x01,
	0x3018, 0x01, 0x3019, 0x00, 0x301A, 0x01, 0x3025, 0x01, 0x3130, 0x01, 0x3004, 0x03,
	0x30A2, 0x01, 0x0B00, 0x00, 0x3250, 0x00, 0x3251, 0x00, 0x3011, 0x00, 0x3013, 0x01,
	0x3129, 0x00, 0x3125, 0x00, 0x3127, 0x01, 0x3140, 0x00, 0x3141, 0x01, 0x3142, 0x00,
	0x314F, 0x00,
#if 0
	/* 1: PD Data is output */
	0x3121, 0x01,
	/* 1: PD Data is output */
	0x3123, 0x01, 0x3150, 0x00, 0x3151, 0x00, 0x3152, 0x00, 0x3153, 0x00, 0x3158, 0x00,
	0x3159, 0x00, 0x315A, 0x00, 0x315B, 0x00, 0x315C, 0x00, 0x315D, 0x00, 0x315E, 0x00,
	0x315F, 0x00, 0x3160, 0x00, 0x3161, 0x00, 0x3162, 0x00, 0x3163, 0x00, 0x3164, 0x00,
	0x3165, 0x00, 0x3166, 0x00, 0x3167, 0x00, 0x3168, 0x00, 0x3169, 0x00, 0x316A, 0x00,
	0x316B, 0x00, 0x316C, 0x00, 0x316D, 0x00, 0x316E, 0x00, 0x316F, 0x00, 0x3170, 0x00,
	0x3171, 0x00, 0x3172, 0x00, 0x3173, 0x00, 0x3174, 0x00, 0x3175, 0x00, 0x3176, 0x00,
	0x3177, 0x00, 0x3178, 0x00, 0x3179, 0x00, 0x317A, 0x00, 0x317B, 0x00, 0x317C, 0x00,
	0x317D, 0x00, 0x317E, 0x00, 0x317F, 0x00, 0x3180, 0x00, 0x3181, 0x00, 0x3182, 0x00,
	0x3183, 0x00, 0x3184, 0x00, 0x3185, 0x00, 0x3186, 0x00, 0x3187, 0x00, 0x3188, 0x00,
	0x3189, 0x00, 0x318A, 0x00, 0x318B, 0x00, 0x318C, 0x00, 0x318D, 0x00, 0x318E, 0x00,
	0x318F, 0x00, 0x3190, 0x00, 0x3191, 0x00, 0x3192, 0x00, 0x3193, 0x00, 0x3194, 0x00,
	0x3195, 0x00, 0x3196, 0x00, 0x3197, 0x00, 0x31B4, 0x00, 0x31B5, 0x00, 0x31B6, 0x00,
	0x31B7, 0x00, 0x31B8, 0x00, 0x31B9, 0x00, 0x31BA, 0x00, 0x31BB, 0x00, 0x3291, 0x01,
#endif
	0x0B8E, 0x01, 0x0B8F, 0x00, 0x0B90, 0x01, 0x0B91, 0x00, 0x0B92, 0x01, 0x0B93, 0x00,
	0x0B94, 0x01, 0x0B95, 0x00, 0x0100, 0x01
};

kal_uint16 addr_data_pair_custom1_imx300[] = {
	0x0100, 0x00, 0x0301, 0x04, 0x0303, 0x02, 0x0305, 0x03, 0x0306, 0x00, 0x0307, 0xBE, 0x0309,
	0x0A, 0x030B, 0x01, 0x030D, 0x03, 0x030E, 0x00, 0x030F, 0xB6, 0x0112, 0x0A, 0x0113,
	0x0A, 0x0114, 0x03, 0x0221, 0x11, 0x0381, 0x01, 0x0383, 0x01, 0x0385, 0x01, 0x0387,
	0x01, 0x0401, 0x00, 0x0404, 0x01, 0x0405, 0x00, 0x0900, 0x00, 0x0901, 0x11, 0x0902,
	0x00, 0x31E8, 0x01, 0x31E9, 0x00, 0x31EC, 0x00, 0x31F0, 0x03, 0x31F1, 0x84, 0x3221,
	0x00, 0x6DC2, 0x04, 0x6DC3, 0x01, 0x6DC4, 0x60, 0x6DC7, 0x04, 0x6DCA, 0x00, 0x6DCB,
	0x00, 0x6DCC, 0x01, 0x7EA0, 0x00, 0x7EA3, 0x08, 0x7EA5, 0x0F, 0x7EA6, 0x60, 0x7EA8,
	0x00, 0x7EA9, 0x78, 0x7EAC, 0x00, 0x7EB3, 0x00, 0x7EB4, 0x00, 0x7EB5, 0x00, 0x0340,
	0x10, 0x0341, 0xA6, 0x0342, 0x20, 0x0343, 0x20, 0x0344, 0x00, 0x0345, 0x00, 0x0346,
	0x00, 0x0347, 0x00, 0x0348, 0x17, 0x0349, 0x5F, 0x034A, 0x10, 0x034B, 0x3F, 0x034C,
	0x17, 0x034D, 0x60, 0x034E, 0x10, 0x034F, 0x40, 0x0408, 0x00, 0x0409, 0x00, 0x040A,
	0x00, 0x040B, 0x00, 0x040C, 0x17, 0x040D, 0x60, 0x040E, 0x10, 0x040F, 0x40, 0x30E4,
	0x15, 0x30E5, 0x90, 0x30E6, 0x01, 0x30E7, 0x00, 0x30E8, 0x15, 0x30E9, 0x90, 0x30EA,
	0x05, 0x30EB, 0x00, 0x30EC, 0x15, 0x30ED, 0x90, 0x30EE, 0x01, 0x30EF, 0x00, 0x30F4,
	0x15, 0x30F5, 0x90, 0x30F6, 0x01, 0x30F7, 0x00, 0x3294, 0x00, 0x3295, 0xe8, 0x3296,
	0x16, 0x3297, 0x77, 0x0202, 0x10, 0x0203, 0x92, 0x0204, 0x00, 0x0205, 0x00, 0x020E,
	0x01, 0x020F, 0x00, 0x0210, 0x01, 0x0211, 0x00, 0x0212, 0x01, 0x0213, 0x00, 0x0214,
	0x01, 0x0215, 0x00, 0x0216, 0x00, 0x0217, 0x00, 0x3220, 0x00, 0x3006, 0x01, 0x3007,
	0x02, 0x31E0, 0x03, 0x31E1, 0xFF, 0x31E4, 0x02, 0x3A00, 0x19, 0x3A01, 0x00, 0x3A02,
	0x00, 0x3A03, 0x08, 0x3A04, 0x00, 0x3A05, 0x00, 0x3A06, 0x00, 0x3A07, 0x00, 0x3A08,
	0x00, 0x4301, 0x94, 0x4302, 0x15, 0x4303, 0x44, 0x4304, 0x09, 0x4305, 0x07, 0x4306,
	0x87, 0x4307, 0x88, 0x4308, 0xBA, 0x4309, 0x21, 0x4F7E, 0x12, 0x0220, 0x00, 0x0222,
	0x01, 0x0224, 0x01, 0x0225, 0xF4, 0x3000, 0x54, 0x3001, 0x01, 0x0600, 0x00, 0x0601,
	0x00, 0x3022, 0x01, 0x0b05, 0x01, 0x0b06, 0x01, 0x3018, 0x01, 0x3019, 0x00, 0x301A,
	0x01, 0x3025, 0x01, 0x3130, 0x01, 0x3004, 0x03, 0x30A2, 0x00, 0x0B00, 0x00, 0x3250,
	0x00, 0x3251, 0x00, 0x3011, 0x00, 0x3013, 0x01, 0x3129, 0x00, 0x3125, 0x00, 0x3127,
	0x01, 0x3140, 0x00, 0x3141, 0x01, 0x3142, 0x00, 0x314F, 0x00, 0x3121, 0x01, 0x3123,
	0x01, 0x3150, 0x00, 0x3151, 0x00, 0x3152, 0x00, 0x3153, 0x00, 0x3158, 0x00, 0x3159,
	0x00, 0x315A, 0x00, 0x315B, 0x00, 0x315C, 0x00, 0x315D, 0x00, 0x315E, 0x00, 0x315F,
	0x00, 0x3160, 0x00, 0x3161, 0x00, 0x3162, 0x00, 0x3163, 0x00, 0x3164, 0x00, 0x3165,
	0x00, 0x3166, 0x00, 0x3167, 0x00, 0x3168, 0x00, 0x3169, 0x00, 0x316A, 0x00, 0x316B,
	0x00, 0x316C, 0x00, 0x316D, 0x00, 0x316E, 0x00, 0x316F, 0x00, 0x3170, 0x00, 0x3171,
	0x00, 0x3172, 0x00, 0x3173, 0x00, 0x3174, 0x00, 0x3175, 0x00, 0x3176, 0x00, 0x3177,
	0x00, 0x3178, 0x00, 0x3179, 0x00, 0x317A, 0x00, 0x317B, 0x00, 0x317C, 0x00, 0x317D,
	0x00, 0x317E, 0x00, 0x317F, 0x00, 0x3180, 0x00, 0x3181, 0x00, 0x3182, 0x00, 0x3183,
	0x00, 0x3184, 0x00, 0x3185, 0x00, 0x3186, 0x00, 0x3187, 0x00, 0x3188, 0x00, 0x3189,
	0x00, 0x318A, 0x00, 0x318B, 0x00, 0x318C, 0x00, 0x318D, 0x00, 0x318E, 0x00, 0x318F,
	0x00, 0x3190, 0x00, 0x3191, 0x00, 0x3192, 0x00, 0x3193, 0x00, 0x3194, 0x00, 0x3195,
	0x00, 0x3196, 0x00, 0x3197, 0x00, 0x31B4, 0x00, 0x31B5, 0x00, 0x31B6, 0x00, 0x31B7,
	0x00, 0x31B8, 0x00, 0x31B9, 0x00, 0x31BA, 0x00, 0x31BB, 0x00, 0x3291, 0x01, 0x0B8E,
	0x01, 0x0B8F, 0x00, 0x0B90, 0x01, 0x0B91, 0x00, 0x0B92, 0x01, 0x0B93, 0x00, 0x0B94,
	0x01, 0x0B95, 0x00, 0x0100, 0x01
};

kal_uint16 addr_data_pair_custom2_imx300[] = {
	0x0100, 0x00, 0x0301, 0x04, 0x0303, 0x02, 0x0305, 0x03, 0x0306, 0x00, 0x0307, 0xBE, 0x0309,
	0x0A, 0x030B, 0x01, 0x030D, 0x03, 0x030E, 0x00, 0x030F, 0xB6, 0x0112, 0x0A, 0x0113,
	0x0A, 0x0114, 0x03, 0x0221, 0x11, 0x0381, 0x01, 0x0383, 0x01, 0x0385, 0x01, 0x0387,
	0x01, 0x0401, 0x00, 0x0404, 0x01, 0x0405, 0x00, 0x0900, 0x00, 0x0901, 0x11, 0x0902,
	0x00, 0x31E8, 0x01, 0x31E9, 0x00, 0x31EC, 0x00, 0x31F0, 0x03, 0x31F1, 0x84, 0x3221,
	0x00, 0x6DC2, 0x04, 0x6DC3, 0x01, 0x6DC4, 0x60, 0x6DC7, 0x04, 0x6DCA, 0x00, 0x6DCB,
	0x00, 0x6DCC, 0x01, 0x7EA0, 0x00, 0x7EA3, 0x08, 0x7EA5, 0x0F, 0x7EA6, 0x60, 0x7EA8,
	0x00, 0x7EA9, 0x78, 0x7EAC, 0x00, 0x7EB3, 0x00, 0x7EB4, 0x00, 0x7EB5, 0x00, 0x0340,
	0x0D, 0x0341, 0xF8, 0x0342, 0x20, 0x0343, 0x20, 0x0344, 0x00, 0x0345, 0x00, 0x0346,
	0x01, 0x0347, 0x80, 0x0348, 0x17, 0x0349, 0x5F, 0x034A, 0x0E, 0x034B, 0xBF, 0x034C,
	0x17, 0x034D, 0x60, 0x034E, 0x0D, 0x034F, 0x40, 0x0408, 0x00, 0x0409, 0x00, 0x040A,
	0x00, 0x040B, 0x00, 0x040C, 0x17, 0x040D, 0x60, 0x040E, 0x0D, 0x040F, 0x40, 0x30E4,
	0x15, 0x30E5, 0x90, 0x30E6, 0x01, 0x30E7, 0x00, 0x30E8, 0x15, 0x30E9, 0x90, 0x30EA,
	0x05, 0x30EB, 0x00, 0x30EC, 0x15, 0x30ED, 0x90, 0x30EE, 0x01, 0x30EF, 0x00, 0x30F4,
	0x15, 0x30F5, 0x90, 0x30F6, 0x01, 0x30F7, 0x00, 0x3294, 0x00, 0x3295, 0xe8, 0x3296,
	0x16, 0x3297, 0x77, 0x0202, 0x0D, 0x0203, 0xE4, 0x0204, 0x00, 0x0205, 0x00, 0x020E,
	0x01, 0x020F, 0x00, 0x0210, 0x01, 0x0211, 0x00, 0x0212, 0x01, 0x0213, 0x00, 0x0214,
	0x01, 0x0215, 0x00, 0x0216, 0x00, 0x0217, 0x00, 0x3220, 0x00, 0x3006, 0x01, 0x3007,
	0x02, 0x31E0, 0x03, 0x31E1, 0xFF, 0x31E4, 0x02, 0x3A00, 0x19, 0x3A01, 0x00, 0x3A02,
	0x00, 0x3A03, 0x08, 0x3A04, 0x00, 0x3A05, 0x00, 0x3A06, 0x00, 0x3A07, 0x00, 0x3A08,
	0x00, 0x4301, 0x94, 0x4302, 0x15, 0x4303, 0x44, 0x4304, 0x09, 0x4305, 0x07, 0x4306,
	0x87, 0x4307, 0x88, 0x4308, 0xBA, 0x4309, 0x21, 0x4F7E, 0x12, 0x0220, 0x02, 0x0222,
	0x01, 0x0224, 0x01, 0x0225, 0xF4, 0x3000, 0x54, 0x3001, 0x01, 0x0600, 0x00, 0x0601,
	0x00, 0x3022, 0x01, 0x0b05, 0x01, 0x0b06, 0x01, 0x3018, 0x01, 0x3019, 0x00, 0x301A,
	0x01, 0x3025, 0x01, 0x3130, 0x01, 0x3004, 0x03, 0x30A2, 0x01, 0x0B00, 0x00, 0x3250,
	0x00, 0x3251, 0x00, 0x3011, 0x00, 0x3013, 0x01, 0x3129, 0x00, 0x3125, 0x00, 0x3127,
	0x01, 0x3140, 0x00, 0x3141, 0x01, 0x3142, 0x00, 0x314F, 0x00, 0x3121, 0x01, 0x3123,
	0x01, 0x3150, 0x00, 0x3151, 0x00, 0x3152, 0x00, 0x3153, 0x00, 0x3158, 0x00, 0x3159,
	0x00, 0x315A, 0x00, 0x315B, 0x00, 0x315C, 0x00, 0x315D, 0x00, 0x315E, 0x00, 0x315F,
	0x00, 0x3160, 0x00, 0x3161, 0x00, 0x3162, 0x00, 0x3163, 0x00, 0x3164, 0x00, 0x3165,
	0x00, 0x3166, 0x00, 0x3167, 0x00, 0x3168, 0x00, 0x3169, 0x00, 0x316A, 0x00, 0x316B,
	0x00, 0x316C, 0x00, 0x316D, 0x00, 0x316E, 0x00, 0x316F, 0x00, 0x3170, 0x00, 0x3171,
	0x00, 0x3172, 0x00, 0x3173, 0x00, 0x3174, 0x00, 0x3175, 0x00, 0x3176, 0x00, 0x3177,
	0x00, 0x3178, 0x00, 0x3179, 0x00, 0x317A, 0x00, 0x317B, 0x00, 0x317C, 0x00, 0x317D,
	0x00, 0x317E, 0x00, 0x317F, 0x00, 0x3180, 0x00, 0x3181, 0x00, 0x3182, 0x00, 0x3183,
	0x00, 0x3184, 0x00, 0x3185, 0x00, 0x3186, 0x00, 0x3187, 0x00, 0x3188, 0x00, 0x3189,
	0x00, 0x318A, 0x00, 0x318B, 0x00, 0x318C, 0x00, 0x318D, 0x00, 0x318E, 0x00, 0x318F,
	0x00, 0x3190, 0x00, 0x3191, 0x00, 0x3192, 0x00, 0x3193, 0x00, 0x3194, 0x00, 0x3195,
	0x00, 0x3196, 0x00, 0x3197, 0x00, 0x31B4, 0x00, 0x31B5, 0x00, 0x31B6, 0x00, 0x31B7,
	0x00, 0x31B8, 0x00, 0x31B9, 0x00, 0x31BA, 0x00, 0x31BB, 0x00, 0x3291, 0x01, 0x0B8E,
	0x01, 0x0B8F, 0x00, 0x0B90, 0x01, 0x0B91, 0x00, 0x0B92, 0x01, 0x0B93, 0x00, 0x0B94,
	0x01, 0x0B95, 0x00, 0x0100, 0x01
};

#endif
